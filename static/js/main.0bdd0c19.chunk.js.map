{"version":3,"sources":["ActionButton.js","RecordingState.js","RecordButton.js","Utils.js","AudioVisualizer.js","RecordingTimeManager.js","Annotation.js","RecordingScreen.js","SummaryScreen.js","App.js","serviceWorker.js","index.js"],"names":["styles","ActionButton","height","width","fontSize","backgroundColor","props","disabled","grey","red","&:hover","color","fontWeight","marginTop","marginBottom","_this","this","classes","react_default","a","createElement","Button","className","onClick","onAnnotationButtonClicked","name","Component","withStyles","RecordingStateActions","NONE","START","STOP","PAUSE","RESUME","TOKEN","token","RecordingState","status","Object","classCallCheck","Error","_status","RECORDING","PAUSED","OFF","STARTING","STOPPING","prevRecordingState","RecordingButton","RecordingButtonLabel","RecordButton","Fab","aria-label","recordingState","Stop_default","Mic_default","React","Utils","secondsToTimeString","totalSeconds","showMilliseconds","minutes","Math","floor","seconds","millis","concat","getAnnotationForTimestamp","timeStampMs","annotations","resultAnnotation","forEach","annotation","timestamp","totalDuration","BAR_WIDTH_PX","REFRESH_INTERVAL_MS","CANVAS_WIDTH_PX","AudioVisualizer","possibleConstructorReturn","getPrototypeOf","call","componentDidUpdate","prevProps","prevState","canvas","current","requestAnimationFrame","_draw","prevStream","stream","audioContext","window","AudioContext","webkitAudioContext","analyser","createAnalyser","smoothingTimeConstant","dataArray","Uint8Array","frequencyBinCount","source","createMediaStreamSource","connect","timerID","setInterval","_onRefreshVisualizer","setState","audioArray","componentDidMount","addEventListener","event","rect","target","getBoundingClientRect","mousePosition","x","clientX","left","y","clientY","top","componentWillUnmount","clearInterval","cancelAnimationFrame","disconnect","stop","getByteFrequencyData","values","i","length","average_amplitude","state","newAudioArray","toConsumableArray","shift","currentAnnotation","elapsedTimeMs","annotatedValues","slice","map","chunk","amplitude","selected","annotated","splice","apply","context","getContext","clearRect","index","barHeight","opacity","redColor","goldColor","fillStyle","fillRect","createRef","ref","RecordingTimeManager","onIntervalTick","interval","start","_recordingStartTimeMs","Date","now","_recordingInterval","_onIntervalTick","getElapsedTimeMs","_interval","pause","_currentRecordingPausedStartTime","_recordingPausedPeriods","resume","isStarted","nowMs","totalPausedTimeMs","keys","startTime","reduce","total","currentDuration","ActionItemAnnotation","_Annotation","inherits","Annotation","type","getStartTimeMs","getEndTimeMs","id","uuid","v4","RecordingScreen","script","document","src","async","body","appendChild","_ref","asyncToGenerator","regenerator_default","mark","_callee","recordingStateAction","wrap","_context","prev","next","compareToPrevious","t0","_requestPermission","sent","_recordingTimeManager","_recorder","RecordRTCPromisesHandler","startRecording","abrupt","stopRecording","t1","getSeekableBlob","getBlob","t2","t3","seekableBlob","_audioAnalyzer","onAudioUrlAdded","URL","createObjectURL","_x","_x2","arguments","_onMsIntervalTick","_toggleRecording","_callee2","_context2","_callee3","_context3","navigator","mediaDevices","getUserMedia","video","audio","_onAnnotationButtonClicked","actionItem","onAnnotationAdded","_this2","Grid","container","direction","alignItems","item","Duration","src_RecordButton","AudioContainer","src_AudioVisualizer","element","src_ActionButton","durationSecondsString","margin","padding","textAlign","AnnotationContainer","minHeight","AnnotationIcon","marginRight","Header","TableHeader","TableCell","ResetButton","position","PlayButton","marginLeft","AudioPlayer","SummaryScreen","_onAnnotationPlayed","_audioPlayer","audioEl","currentTime","play","_this$props","audioUrl","Fragment","bundle_default","controls","onReset","Replay_default","Table","TableHead","TableRow","align","TableBody","key","component","scope","size","PlayArrow_default","App","background","blueGrey","_onAudioUrlAdded","url","_onAnnotationAdded","console","log","objectSpread","_onReset","Container","maxWidth","src_RecordingScreen","src_SummaryScreen","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0bdd0c19.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { withStyles } from \"@material-ui/styles\";\nimport Button from \"@material-ui/core/Button\";\n\nimport { red, grey } from \"@material-ui/core/colors/\";\n\nconst styles = {\n    ActionButton: {\n        height: \"60px\",\n        width: \"200px\",\n        fontSize: 24,\n        backgroundColor: props => (props.disabled ? grey[\"500\"] : red[\"500\"]),\n        \"&:hover\": {\n            backgroundColor: red[\"200\"]\n        },\n        color: \"#fff\",\n        fontWeight: \"lighter\",\n        marginTop: \"20px\",\n        marginBottom: \"60px\"\n    }\n};\n\nclass ActionButton extends Component {\n    render() {\n        const { classes } = this.props;\n\n        return (\n            <Button\n                className={classes.ActionButton}\n                onClick={() => {\n                    this.props.onAnnotationButtonClicked(this.props.name);\n                }}\n                disabled={this.props.disabled}\n            >\n                {this.props.name}\n            </Button>\n        );\n    }\n}\n\nexport default withStyles(styles)(ActionButton);\n","export const RecordingStateActions = {\n    NONE: \"NONE\",\n    START: \"START\",\n    STOP: \"STOP\",\n    PAUSE: \"PAUSE\",\n    RESUME: \"RESUME\"\n};\n\n// Make RecordingState's constructor effectively private by requiring this token\n// to construct, which is only available in this file.\nconst TOKEN = { token: \"unique recording state token\" };\n\nclass RecordingState {\n    constructor(token, status) {\n        if (token !== TOKEN) {\n            throw new Error(\n                \"RecordingState is an enum and should not be constructed directly; \" +\n                    \"please use an existing RecordingState.* declared in recording_state.es6.js\"\n            );\n        }\n\n        this._status = status;\n    }\n\n    isActive() {\n        return (\n            this === RecordingState.RECORDING || this === RecordingState.PAUSED\n        );\n    }\n\n    isRecording() {\n        return this === RecordingState.RECORDING;\n    }\n\n    isPaused() {\n        return this === RecordingState.PAUSED;\n    }\n\n    isOff() {\n        return this === RecordingState.OFF;\n    }\n\n    isStartingOrStopping() {\n        return (\n            this === RecordingState.STARTING || this === RecordingState.STOPPING\n        );\n    }\n\n    start() {\n        if (this === RecordingState.OFF) {\n            return RecordingState.STARTING;\n        } else {\n            return this;\n        }\n    }\n\n    stop() {\n        if (this === RecordingState.OFF) {\n            return RecordingState.OFF;\n        } else {\n            return RecordingState.STOPPING;\n        }\n    }\n\n    pause() {\n        return RecordingState.PAUSED;\n    }\n\n    resume() {\n        return RecordingState.RECORDING;\n    }\n\n    compareToPrevious(prevRecordingState) {\n        if (\n            this === RecordingState.STARTING &&\n            prevRecordingState === RecordingState.OFF\n        ) {\n            return RecordingStateActions.START;\n        } else if (\n            this === RecordingState.STOPPING &&\n            prevRecordingState !== RecordingState.STOPPING\n        ) {\n            return RecordingStateActions.STOP;\n        } else if (\n            this === RecordingState.RECORDING &&\n            prevRecordingState === RecordingState.PAUSED\n        ) {\n            return RecordingStateActions.RESUME;\n        } else if (\n            this === RecordingState.PAUSED &&\n            prevRecordingState === RecordingState.RECORDING\n        ) {\n            return RecordingStateActions.PAUSE;\n        }\n        return RecordingStateActions.NONE;\n    }\n}\n\nRecordingState.OFF = new RecordingState(TOKEN, \"OFF\");\nRecordingState.STARTING = new RecordingState(TOKEN, \"STARTING\");\nRecordingState.RECORDING = new RecordingState(TOKEN, \"RECORDING\");\nRecordingState.PAUSED = new RecordingState(TOKEN, \"PAUSED\");\nRecordingState.STOPPING = new RecordingState(TOKEN, \"STOPPING\");\n\nexport default RecordingState;\n","import React from \"react\";\nimport { withStyles } from \"@material-ui/styles\";\nimport Fab from \"@material-ui/core/Fab\";\nimport Mic from \"@material-ui/icons/Mic\";\nimport Stop from \"@material-ui/icons/Stop\";\nimport RecordingState from \"./RecordingState\";\n\nimport red from \"@material-ui/core/colors/red\";\n\nconst styles = {\n    RecordingButton: {\n        marginBottom: \"70px\",\n        backgroundColor: red[\"600\"],\n        \"&:hover\": {\n            backgroundColor: red[\"200\"]\n        },\n        color: \"#fff\"\n    },\n    RecordingButtonLabel: {\n        height: \"30px\",\n        width: \"30px\"\n    }\n};\n\nclass RecordButton extends React.Component {\n    render() {\n        const { classes } = this.props;\n\n        return (\n            <Fab\n                className={classes.RecordingButton}\n                aria-label=\"record\"\n                onClick={this.props.onClick}\n            >\n                {this.props.recordingState === RecordingState.RECORDING ? (\n                    <Stop className={classes.RecordingButtonLabel} />\n                ) : (\n                    <Mic className={classes.RecordingButtonLabel} />\n                )}\n            </Fab>\n        );\n    }\n}\n\nexport default withStyles(styles)(RecordButton);\n","const Utils = {\n    secondsToTimeString: (totalSeconds, showMilliseconds) => {\n        let minutes = Math.floor(totalSeconds / 60);\n        let seconds = Math.floor(totalSeconds % 60);\n        let millis = Math.floor(((totalSeconds * 1000) % 1000) / 10);\n        if (seconds < 10) {\n            seconds = \"0\" + seconds;\n        }\n        if (!showMilliseconds) {\n            return `${minutes}:${seconds}`;\n        }\n        return `${minutes}:${seconds}.${millis}`;\n    },\n\n    getAnnotationForTimestamp: (timeStampMs, annotations) => {\n        let resultAnnotation = null;\n        annotations.forEach(annotation => {\n            if (\n                timeStampMs <\n                    annotation.timestamp + annotation.totalDuration / 2 &&\n                timeStampMs >\n                    annotation.timestamp - annotation.totalDuration / 2\n            ) {\n                resultAnnotation = annotation;\n            }\n        });\n        return resultAnnotation;\n    }\n};\n\nexport default Utils;\n","import React, { Component } from \"react\";\nimport RecordingState from \"./RecordingState\";\nimport { withStyles } from \"@material-ui/styles\";\nimport Utils from \"./Utils\";\n\nconst BAR_WIDTH_PX = 6;\nconst REFRESH_INTERVAL_MS = 60;\nconst CANVAS_WIDTH_PX = 1000;\nconst CANVAS_HEIGHT_PX = 300;\n\nconst styles = {};\n\nclass AudioVisualizer extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            audioArray: [],\n            mousePosition: {\n                x: 0,\n                y: 0\n            }\n        };\n        this.canvas = React.createRef();\n    }\n\n    componentDidUpdate = (prevProps, prevState) => {\n        if (this.canvas && this.canvas.current) {\n            requestAnimationFrame(this._draw);\n        }\n        const prevStream = prevProps.stream;\n        const stream = this.props.stream;\n        if (prevStream == null && stream != null) {\n            this.audioContext = new (window.AudioContext ||\n                window.webkitAudioContext)();\n\n            this.analyser = this.audioContext.createAnalyser();\n            this.analyser.smoothingTimeConstant = 0;\n            this.dataArray = new Uint8Array(this.analyser.frequencyBinCount);\n\n            if (stream) {\n                this.source = this.audioContext.createMediaStreamSource(stream);\n                this.source.connect(this.analyser);\n            }\n\n            this.timerID = setInterval(() => {\n                if (this.props.recordingState === RecordingState.RECORDING) {\n                    this._onRefreshVisualizer();\n                }\n            }, REFRESH_INTERVAL_MS);\n        } else if (prevStream && stream == null) {\n            this.setState({\n                audioArray: []\n            });\n        }\n    };\n\n    componentDidMount = () => {\n        if (this.canvas) {\n            this.canvas.current.addEventListener(\"mousemove\", event => {\n                var rect = event.target.getBoundingClientRect();\n                this.setState({\n                    mousePosition: {\n                        x: event.clientX - rect.left,\n                        y: event.clientY - rect.top\n                    }\n                });\n            });\n        }\n    };\n\n    componentWillUnmount = () => {\n        clearInterval(this.timerID);\n        cancelAnimationFrame(this._draw);\n        if (this.analyser) {\n            this.analyser.disconnect();\n        }\n        if (this.source) {\n            this.source.disconnect();\n        }\n    };\n\n    stop = () => {\n        clearInterval(this.timerID);\n    };\n\n    _onRefreshVisualizer = () => {\n        this.analyser.getByteFrequencyData(this.dataArray);\n        let values = 0;\n        for (var i = 0; i < this.dataArray.length; i++) {\n            values += this.dataArray[i];\n        }\n\n        const average_amplitude = values / this.dataArray.length;\n\n        this.setState(state => {\n            let newAudioArray = [...state.audioArray];\n            if (\n                this.state.audioArray.length >=\n                Math.floor(CANVAS_WIDTH_PX / BAR_WIDTH_PX)\n            ) {\n                newAudioArray.shift();\n            }\n\n            const currentAnnotation =\n                this.props.annotations &&\n                Utils.getAnnotationForTimestamp(\n                    this.props.elapsedTimeMs,\n                    this.props.annotations\n                );\n            if (currentAnnotation != null) {\n                const annotatedValues = state.audioArray\n                    .slice(\n                        -(\n                            currentAnnotation.totalDuration /\n                            2 /\n                            REFRESH_INTERVAL_MS\n                        )\n                    )\n                    .map(chunk => ({\n                        amplitude: chunk.amplitude,\n                        timestamp: chunk.timestamp,\n                        selected: chunk.selected,\n                        x: chunk.x,\n                        annotated: true\n                    }));\n\n                newAudioArray.splice(\n                    newAudioArray.length - annotatedValues.length,\n                    currentAnnotation.totalDuration / 2 / REFRESH_INTERVAL_MS,\n                    ...annotatedValues\n                );\n            }\n            return {\n                audioArray: [\n                    ...newAudioArray,\n                    {\n                        amplitude: average_amplitude,\n                        timestamp: this.props.elapsedTimeMs,\n                        x: Math.floor(BAR_WIDTH_PX * state.audioArray.length),\n                        selected: false,\n                        annotated: currentAnnotation != null\n                    }\n                ]\n            };\n        });\n    };\n\n    _draw = () => {\n        const canvas = this.canvas.current;\n\n        if (canvas) {\n            const height = canvas.height;\n            const width = canvas.width;\n\n            const context = canvas.getContext(\"2d\");\n\n            context.clearRect(0, 0, width, height);\n\n            this.state.audioArray.forEach((chunk, index) => {\n                const barHeight = 2 + chunk.amplitude;\n                const opacity = 0.2 + barHeight / 50;\n                const redColor = \"rgba(244, 67, 54,\" + opacity + \")\";\n                const goldColor = \"rgba(255, 196, 0,\" + opacity + \")\";\n                const whiteColor = \"rgb(255, 255, 255)\";\n                const rect = {\n                    x: index * BAR_WIDTH_PX,\n                    y: height / 2 - barHeight,\n                    width: BAR_WIDTH_PX * 0.6,\n                    height: barHeight * 2\n                };\n\n                if (\n                    this.state.mousePosition.x > rect.x &&\n                    this.state.mousePosition.x < rect.x + BAR_WIDTH_PX\n                ) {\n                    chunk.selected = true;\n                } else {\n                    chunk.selected = false;\n                }\n\n                context.fillStyle = chunk.selected\n                    ? whiteColor\n                    : chunk.annotated\n                    ? goldColor\n                    : redColor;\n\n                context.fillRect(\n                    index * BAR_WIDTH_PX,\n                    height / 2 - barHeight,\n                    BAR_WIDTH_PX * 0.6,\n                    barHeight * 2\n                );\n            });\n        }\n    };\n\n    render() {\n        return (\n            <canvas\n                ref={this.canvas}\n                height={CANVAS_HEIGHT_PX}\n                width={CANVAS_WIDTH_PX}\n            />\n        );\n    }\n}\n\nexport default withStyles(styles)(AudioVisualizer);\n","export default class RecordingTimeManager {\n    constructor(onIntervalTick, interval) {\n        this._recordingInterval = null;\n        this._recordingStartTimeMs = null;\n        this._recordingPausedPeriods = {};\n        this._currentRecordingPausedStartTime = null;\n        this._onIntervalTick = onIntervalTick;\n        this._interval = interval;\n    }\n\n    setOnIntervalTick(onIntervalTick) {\n        this._onIntervalTick = onIntervalTick;\n    }\n\n    start = () => {\n        this._recordingStartTimeMs = Date.now();\n        this._recordingInterval = setInterval(() => {\n            this._onIntervalTick &&\n                this._onIntervalTick(this.getElapsedTimeMs());\n        }, this._interval && this._interval);\n    };\n\n    pause = () => {\n        this._currentRecordingPausedStartTime = Date.now();\n        this._recordingPausedPeriods[\n            this._currentRecordingPausedStartTime\n        ] = null;\n    };\n\n    resume = () => {\n        this._recordingPausedPeriods[\n            this._currentRecordingPausedStartTime\n        ] = Date.now();\n        this._currentRecordingPausedStartTime = null;\n    };\n\n    stop = () => {\n        clearInterval(this._recordingInterval);\n        this._recordingInterval = null;\n        this._recordingStartTimeMs = null;\n        this._recordingPausedPeriods = {};\n        this._currentRecordingPausedStartTime = null;\n    };\n\n    isStarted = () => this._recordingInterval;\n\n    getElapsedTimeMs = () => {\n        const nowMs = Date.now();\n        const totalPausedTimeMs = Object.keys(this._recordingPausedPeriods)\n            .map(startTime => {\n                let endTime = this._recordingPausedPeriods[startTime] || nowMs;\n                return endTime - startTime;\n            })\n            .reduce((total, currentDuration) => total + currentDuration, 0);\n        const elapsedRecordingTimeMs =\n            nowMs - this._recordingStartTimeMs - totalPausedTimeMs;\n        return elapsedRecordingTimeMs;\n    };\n}\n","import uuid from \"uuid\";\nexport class Annotation {\n    constructor(type, timestamp, totalDuration) {\n        this.id = uuid.v4();\n        this.timestamp = timestamp;\n        this.totalDuration = totalDuration;\n        this.type = type;\n    }\n\n    getStartTimeMs = () => {\n        return this.timestamp - this.totalDuration / 2;\n    };\n\n    getEndTimeMs = () => {\n        return this.timestamp + this.totalDuration / 2;\n    };\n}\n\nexport class ActionItemAnnotation extends Annotation {\n    constructor(timestamp) {\n        super(\"Action Item\", timestamp, 10000);\n    }\n}\n","import React, { Component } from \"react\";\n\nimport { RecordRTCPromisesHandler, getSeekableBlob } from \"recordrtc\";\n\nimport ActionButton from \"./ActionButton\";\nimport RecordButton from \"./RecordButton\";\nimport AudioVisualizer from \"./AudioVisualizer\";\nimport RecordingTimeManager from \"./RecordingTimeManager\";\nimport RecordingState, { RecordingStateActions } from \"./RecordingState\";\nimport Utils from \"./Utils\";\nimport { ActionItemAnnotation } from \"./Annotation\";\n\nimport { withStyles } from \"@material-ui/styles\";\nimport Grid from \"@material-ui/core/Grid\";\n\nconst styles = {\n    Duration: {\n        margin: 0,\n        padding: \"30px\",\n        textAlign: \"center\",\n        color: \"#fff\",\n        fontSize: 50,\n        fontWeight: \"lighter\"\n    },\n    Grid: {\n        height: \"100%\"\n    },\n    AnnotationContainer: {\n        minHeight: \"100px\"\n    },\n    Annotation: {\n        padding: \"8px\"\n    },\n    AnnotationIcon: {\n        height: \"30px\",\n        width: \"30px\",\n        marginRight: \"2px\"\n    },\n    AudioContainer: {\n        minHeight: \"340px\"\n    }\n};\n\nclass RecordingScreen extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            recordingState: RecordingState.OFF,\n            elapsedTimeMs: 0,\n            stream: null\n        };\n\n        this._recordingTimeManager = new RecordingTimeManager(\n            this._onMsIntervalTick,\n            10\n        );\n    }\n\n    componentDidMount = () => {\n        const script = document.createElement(\"script\");\n        script.src = \"https://cdn.webrtc-experiment.com/EBML.js\";\n        script.async = true;\n        document.body.appendChild(script);\n    };\n\n    componentDidUpdate = async (prevProps, prevState) => {\n        const recordingStateAction = this.state.recordingState.compareToPrevious(\n            prevState.recordingState\n        );\n        switch (recordingStateAction) {\n            case RecordingStateActions.START:\n                let stream = await this._requestPermission();\n                this._recordingTimeManager.start();\n                this._recorder = new RecordRTCPromisesHandler(stream, {\n                    type: \"audio\"\n                });\n                await this._recorder.startRecording();\n                this.setState({\n                    recordingState: RecordingState.RECORDING,\n                    stream: stream\n                });\n                break;\n            case RecordingStateActions.STOP:\n                await this._recorder.stopRecording();\n                getSeekableBlob(\n                    await this._recorder.getBlob(),\n                    seekableBlob => {\n                        this._recordingTimeManager.stop();\n                        this._audioAnalyzer.stop();\n                        this.props.onAudioUrlAdded(\n                            URL.createObjectURL(seekableBlob)\n                        );\n                    }\n                );\n\n                break;\n            default:\n                break;\n        }\n    };\n\n    render() {\n        const { classes } = this.props;\n        return (\n            <Grid\n                container\n                direction=\"column\"\n                alignItems=\"center\"\n                className={classes.Grid}\n            >\n                <Grid item>\n                    <h1 className={classes.Duration}>\n                        {Utils.secondsToTimeString(\n                            this.state.elapsedTimeMs / 1000,\n                            false\n                        )}\n                    </h1>\n                </Grid>\n                <Grid item>\n                    <RecordButton\n                        onClick={this._toggleRecording}\n                        recordingState={this.state.recordingState}\n                    />\n                </Grid>\n                <Grid item className={classes.AudioContainer}>\n                    <AudioVisualizer\n                        ref={element => {\n                            if (element) {\n                                this._audioAnalyzer = element;\n                            }\n                        }}\n                        recordingState={this.state.recordingState}\n                        stream={this.state.stream}\n                        annotations={this.props.annotations}\n                        elapsedTimeMs={this.state.elapsedTimeMs}\n                    />\n                </Grid>\n                <Grid item>\n                    <ActionButton\n                        name={\"Action Item\"}\n                        durationSecondsString={\"10s\"}\n                        onAnnotationButtonClicked={\n                            this._onAnnotationButtonClicked\n                        }\n                        disabled={this.state.stream == null}\n                    />\n                </Grid>\n            </Grid>\n        );\n    }\n\n    _onMsIntervalTick = elapsedTimeMs => {\n        this.setState({\n            elapsedTimeMs: elapsedTimeMs\n        });\n    };\n\n    _toggleRecording = async () => {\n        if (this.state.recordingState === RecordingState.RECORDING) {\n            this.setState({\n                recordingState: this.state.recordingState.stop()\n            });\n        } else if (this.state.recordingState === RecordingState.OFF) {\n            this.setState({\n                recordingState: this.state.recordingState.start()\n            });\n        }\n    };\n\n    _requestPermission = async () => {\n        let stream = await navigator.mediaDevices.getUserMedia({\n            video: false,\n            audio: true\n        });\n\n        return stream;\n    };\n\n    _onAnnotationButtonClicked = () => {\n        if (this.state.recordingState === RecordingState.RECORDING) {\n            const actionItem = new ActionItemAnnotation(\n                this.state.elapsedTimeMs\n            );\n            this.props.onAnnotationAdded(actionItem);\n        }\n    };\n}\n\nexport default withStyles(styles)(RecordingScreen);\n","import React, { Component } from \"react\";\n\nimport ReactAudioPlayer from \"react-audio-player\";\n\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport ReplayIcon from \"@material-ui/icons/Replay\";\nimport PlayArrow from \"@material-ui/icons/PlayArrow\";\nimport Fab from \"@material-ui/core/Fab\";\nimport red from \"@material-ui/core/colors/red\";\nimport grey from \"@material-ui/core/colors/grey\";\n\nimport Utils from \"./Utils\";\n\nimport { withStyles } from \"@material-ui/styles\";\n\nconst styles = {\n    Header: {\n        margin: 0,\n        padding: \"30px\",\n        textAlign: \"center\",\n        color: \"#fff\",\n        fontSize: 50,\n        fontWeight: \"lighter\"\n    },\n    TableHeader: {\n        color: \"#fff\",\n        fontSize: 20,\n        fontWeight: \"lighter\"\n    },\n    TableCell: {\n        color: \"#fff\",\n        fontWeight: \"lighter\"\n    },\n    ResetButton: {\n        position: \"absolute\",\n        top: \"0px\",\n        left: \"0px\",\n        margin: \"30px\",\n        backgroundColor: red[\"600\"],\n        \"&:hover\": {\n            backgroundColor: red[\"200\"]\n        },\n        color: \"#fff\"\n    },\n    PlayButton: {\n        marginLeft: \"20px\",\n        backgroundColor: grey[\"300\"],\n        \"&:hover\": {\n            backgroundColor: grey[\"500\"]\n        }\n    },\n    AudioPlayer: {\n        margin: \"20px\",\n        width: \"100%\"\n    }\n};\n\nclass SummaryScreen extends Component {\n    constructor(props) {\n        super(props);\n\n        this._audioPlayer = React.createRef();\n    }\n\n    render() {\n        const { classes, audioUrl } = this.props;\n        return (\n            <>\n                <h2 className={classes.Header}>Summary</h2>\n                <ReactAudioPlayer\n                    ref={this._audioPlayer}\n                    className={classes.AudioPlayer}\n                    controls\n                    src={audioUrl}\n                />\n                <Fab\n                    className={classes.ResetButton}\n                    aria-label=\"reset\"\n                    onClick={this.props.onReset}\n                >\n                    <ReplayIcon className={classes.RecordingButtonLabel} />\n                </Fab>\n                <Table>\n                    <TableHead className={classes.TableHeader}>\n                        <TableRow>\n                            <TableCell className={classes.TableHeader}>\n                                Type\n                            </TableCell>\n                            <TableCell\n                                align=\"right\"\n                                className={classes.TableHeader}\n                            >\n                                Start Time\n                            </TableCell>\n                            <TableCell\n                                align=\"right\"\n                                className={classes.TableHeader}\n                            >\n                                End Time\n                            </TableCell>\n                            <TableCell\n                                align=\"right\"\n                                className={classes.TableHeader}\n                            >\n                                Duration (s)\n                            </TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {this.props.annotations &&\n                            this.props.annotations.map(annotation => (\n                                <TableRow key={annotation.id}>\n                                    <TableCell\n                                        component=\"th\"\n                                        scope=\"row\"\n                                        className={classes.TableCell}\n                                    >\n                                        {annotation.type}\n                                        <Fab\n                                            size={\"small\"}\n                                            className={classes.PlayButton}\n                                            onClick={() => {\n                                                this._onAnnotationPlayed(\n                                                    annotation\n                                                );\n                                            }}\n                                        >\n                                            <PlayArrow />\n                                        </Fab>\n                                    </TableCell>\n                                    <TableCell\n                                        align=\"right\"\n                                        className={classes.TableCell}\n                                    >\n                                        {Utils.secondsToTimeString(\n                                            annotation.getStartTimeMs() > 0\n                                                ? annotation.getStartTimeMs() /\n                                                      1000\n                                                : 0,\n                                            true\n                                        )}\n                                    </TableCell>\n                                    <TableCell\n                                        align=\"right\"\n                                        className={classes.TableCell}\n                                    >\n                                        {Utils.secondsToTimeString(\n                                            annotation.getEndTimeMs() / 1000,\n                                            true\n                                        )}\n                                    </TableCell>\n                                    <TableCell\n                                        align=\"right\"\n                                        className={classes.TableCell}\n                                    >\n                                        {annotation.totalDuration / 1000}\n                                    </TableCell>\n                                </TableRow>\n                            ))}\n                    </TableBody>\n                </Table>\n            </>\n        );\n    }\n\n    _onAnnotationPlayed = annotation => {\n        if (this._audioPlayer) {\n            this._audioPlayer.current.audioEl.currentTime =\n                annotation.getStartTimeMs() / 1000;\n            this._audioPlayer.current.audioEl.play();\n        }\n    };\n}\n\nexport default withStyles(styles)(SummaryScreen);\n","import React, { Component } from \"react\";\n\nimport RecordingScreen from \"./RecordingScreen\";\nimport SummaryScreen from \"./SummaryScreen\";\n\nimport blueGrey from \"@material-ui/core/colors/blueGrey\";\nimport { withStyles } from \"@material-ui/styles\";\nimport Container from \"@material-ui/core/Container\";\n\nconst styles = {\n    App: {\n        height: \"100%\",\n        textAlign: \"center\",\n        background: blueGrey[800]\n    }\n};\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            audioUrl: null,\n            annotations: []\n        };\n    }\n\n    render() {\n        const { classes } = this.props;\n        return (\n            <Container className={classes.App} maxWidth={false}>\n                {this.state.audioUrl == null ? (\n                    <RecordingScreen\n                        annotations={this.state.annotations}\n                        onAudioUrlAdded={this._onAudioUrlAdded}\n                        onAnnotationAdded={this._onAnnotationAdded}\n                    />\n                ) : (\n                    <SummaryScreen\n                        audioUrl={this.state.audioUrl}\n                        annotations={this.state.annotations}\n                        onReset={this._onReset}\n                    />\n                )}\n            </Container>\n        );\n    }\n\n    _onAudioUrlAdded = url => {\n        this.setState({\n            audioUrl: url\n        });\n    };\n\n    _onAnnotationAdded = annotation => {\n        this.setState(state => {\n            console.log(state);\n            return {\n                ...state,\n                annotations: [...state.annotations, annotation]\n            };\n        });\n    };\n\n    _onReset = () => {\n        this.setState({\n            audioUrl: null,\n            annotations: []\n        });\n    };\n}\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}