{"version":3,"sources":["ActionButton.js","RecordingState.js","RecordButton.js","Utils.js","AudioVisualizer.js","RecordingTimeManager.js","Annotation.js","RecordingScreen.js","SummaryScreen.js","App.js","serviceWorker.js","index.js"],"names":["styles","ActionButton","height","width","fontSize","backgroundColor","props","disabled","grey","red","&:hover","color","fontWeight","marginTop","marginBottom","_this","this","classes","react_default","a","createElement","Button","className","onClick","onAnnotationButtonClicked","name","Component","withStyles","RecordingStateActions","NONE","START","STOP","PAUSE","RESUME","TOKEN","token","RecordingState","status","Object","classCallCheck","Error","_status","RECORDING","PAUSED","OFF","STARTING","STOPPING","prevRecordingState","RecordingButton","RecordingButtonLabel","RecordButton","Fab","aria-label","recordingState","Stop_default","Mic_default","React","Utils","secondsToTimeString","totalSeconds","showMilliseconds","minutes","Math","floor","seconds","millis","concat","getAnnotationForTimestamp","timeStampMs","annotations","resultAnnotation","forEach","annotation","timestamp","totalDuration","BAR_WIDTH_PX","REFRESH_INTERVAL_MS","CANVAS_MIN_WIDTH","Scroll","overflow","direction","margin","alignSelf","alignItems","Canvas","float","AudioVisualizer","possibleConstructorReturn","getPrototypeOf","call","componentDidUpdate","prevProps","prevState","audioArray","state","_draw","prevStream","stream","audioContext","window","AudioContext","webkitAudioContext","analyser","createAnalyser","smoothingTimeConstant","dataArray","Uint8Array","frequencyBinCount","source","createMediaStreamSource","connect","timerID","setInterval","_onRefreshVisualizer","setState","componentWillUnmount","clearInterval","disconnect","stop","getByteFrequencyData","values","i","length","newAudioArray","toConsumableArray","currentAnnotation","elapsedTimeMs","annotatedValues","slice","map","chunk","amplitude","annotated","splice","apply","average","canvas","current","context","getContext","clearRect","index","barHeight","opacity","redColor","goldColor","fillStyle","fillRect","createRef","ref","RecordingTimeManager","onIntervalTick","interval","start","_recordingStartTimeMs","Date","now","_recordingInterval","_onIntervalTick","getElapsedTimeMs","_interval","pause","_currentRecordingPausedStartTime","_recordingPausedPeriods","resume","isStarted","nowMs","totalPausedTimeMs","keys","startTime","reduce","total","currentDuration","ActionItemAnnotation","_Annotation","inherits","Annotation","type","id","uuid","v4","RecordingScreen","componentDidMount","script","document","src","async","body","appendChild","_ref","asyncToGenerator","regenerator_default","mark","_callee","recordingStateAction","wrap","_context","prev","next","compareToPrevious","t0","_requestPermission","sent","_recordingTimeManager","_recorder","RecordRTCPromisesHandler","startRecording","abrupt","stopRecording","t1","getSeekableBlob","getBlob","t2","t3","seekableBlob","_audioAnalyzer","onAudioUrlAdded","URL","createObjectURL","_x","_x2","arguments","_onMsIntervalTick","_toggleRecording","_callee2","_context2","_callee3","_context3","navigator","mediaDevices","getUserMedia","video","audio","_onAnnotationButtonClicked","actionItem","onAnnotationAdded","_this2","Grid","container","item","Duration","src_RecordButton","AudioContainer","src_AudioVisualizer","element","src_ActionButton","durationSecondsString","padding","textAlign","AnnotationContainer","minHeight","AnnotationIcon","marginRight","AudioPlayer","Header","TableHeader","TableCell","ResetButton","position","top","left","PlayButton","marginLeft","SummaryScreen","Fragment","onReset","Replay_default","Table","TableHead","TableRow","align","TableBody","key","component","scope","size","PlayArrow_default","App","background","blueGrey","_onAudioUrlAdded","url","audioUrl","_onAnnotationAdded","objectSpread","_onReset","Container","maxWidth","src_RecordingScreen","src_SummaryScreen","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8a586392.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { withStyles } from \"@material-ui/styles\";\nimport Button from \"@material-ui/core/Button\";\n\nimport { red, grey } from \"@material-ui/core/colors/\";\n\nconst styles = {\n    ActionButton: {\n        height: \"60px\",\n        width: \"200px\",\n        fontSize: 24,\n        backgroundColor: props => (props.disabled ? grey[\"500\"] : red[\"500\"]),\n        \"&:hover\": {\n            backgroundColor: red[\"200\"]\n        },\n        color: \"#fff\",\n        fontWeight: \"lighter\",\n        marginTop: \"20px\",\n        marginBottom: \"60px\"\n    }\n};\n\nclass ActionButton extends Component {\n    render() {\n        const { classes } = this.props;\n\n        return (\n            <Button\n                className={classes.ActionButton}\n                onClick={() => {\n                    this.props.onAnnotationButtonClicked(this.props.name);\n                }}\n                disabled={this.props.disabled}\n            >\n                {this.props.name}\n            </Button>\n        );\n    }\n}\n\nexport default withStyles(styles)(ActionButton);\n","export const RecordingStateActions = {\n    NONE: \"NONE\",\n    START: \"START\",\n    STOP: \"STOP\",\n    PAUSE: \"PAUSE\",\n    RESUME: \"RESUME\"\n};\n\n// Make RecordingState's constructor effectively private by requiring this token\n// to construct, which is only available in this file.\nconst TOKEN = { token: \"unique recording state token\" };\n\nclass RecordingState {\n    constructor(token, status) {\n        if (token !== TOKEN) {\n            throw new Error(\n                \"RecordingState is an enum and should not be constructed directly; \" +\n                    \"please use an existing RecordingState.* declared in recording_state.es6.js\"\n            );\n        }\n\n        this._status = status;\n    }\n\n    isActive() {\n        return (\n            this === RecordingState.RECORDING || this === RecordingState.PAUSED\n        );\n    }\n\n    isRecording() {\n        return this === RecordingState.RECORDING;\n    }\n\n    isPaused() {\n        return this === RecordingState.PAUSED;\n    }\n\n    isOff() {\n        return this === RecordingState.OFF;\n    }\n\n    isStartingOrStopping() {\n        return (\n            this === RecordingState.STARTING || this === RecordingState.STOPPING\n        );\n    }\n\n    start() {\n        if (this === RecordingState.OFF) {\n            return RecordingState.STARTING;\n        } else {\n            return this;\n        }\n    }\n\n    stop() {\n        if (this === RecordingState.OFF) {\n            return RecordingState.OFF;\n        } else {\n            return RecordingState.STOPPING;\n        }\n    }\n\n    pause() {\n        return RecordingState.PAUSED;\n    }\n\n    resume() {\n        return RecordingState.RECORDING;\n    }\n\n    compareToPrevious(prevRecordingState) {\n        if (\n            this === RecordingState.STARTING &&\n            prevRecordingState === RecordingState.OFF\n        ) {\n            return RecordingStateActions.START;\n        } else if (\n            this === RecordingState.STOPPING &&\n            prevRecordingState !== RecordingState.STOPPING\n        ) {\n            return RecordingStateActions.STOP;\n        } else if (\n            this === RecordingState.RECORDING &&\n            prevRecordingState === RecordingState.PAUSED\n        ) {\n            return RecordingStateActions.RESUME;\n        } else if (\n            this === RecordingState.PAUSED &&\n            prevRecordingState === RecordingState.RECORDING\n        ) {\n            return RecordingStateActions.PAUSE;\n        }\n        return RecordingStateActions.NONE;\n    }\n}\n\nRecordingState.OFF = new RecordingState(TOKEN, \"OFF\");\nRecordingState.STARTING = new RecordingState(TOKEN, \"STARTING\");\nRecordingState.RECORDING = new RecordingState(TOKEN, \"RECORDING\");\nRecordingState.PAUSED = new RecordingState(TOKEN, \"PAUSED\");\nRecordingState.STOPPING = new RecordingState(TOKEN, \"STOPPING\");\n\nexport default RecordingState;\n","import React from \"react\";\nimport { withStyles } from \"@material-ui/styles\";\nimport Fab from \"@material-ui/core/Fab\";\nimport Mic from \"@material-ui/icons/Mic\";\nimport Stop from \"@material-ui/icons/Stop\";\nimport RecordingState from \"./RecordingState\";\n\nimport red from \"@material-ui/core/colors/red\";\n\nconst styles = {\n    RecordingButton: {\n        marginBottom: \"70px\",\n        backgroundColor: red[\"600\"],\n        \"&:hover\": {\n            backgroundColor: red[\"200\"]\n        },\n        color: \"#fff\"\n    },\n    RecordingButtonLabel: {\n        height: \"30px\",\n        width: \"30px\"\n    }\n};\n\nclass RecordButton extends React.Component {\n    render() {\n        const { classes } = this.props;\n\n        return (\n            <Fab\n                className={classes.RecordingButton}\n                aria-label=\"record\"\n                onClick={this.props.onClick}\n            >\n                {this.props.recordingState === RecordingState.RECORDING ? (\n                    <Stop className={classes.RecordingButtonLabel} />\n                ) : (\n                    <Mic className={classes.RecordingButtonLabel} />\n                )}\n            </Fab>\n        );\n    }\n}\n\nexport default withStyles(styles)(RecordButton);\n","const Utils = {\n    secondsToTimeString: (totalSeconds, showMilliseconds) => {\n        let minutes = Math.floor(totalSeconds / 60);\n        let seconds = Math.floor(totalSeconds % 60);\n        let millis = Math.floor(((totalSeconds * 1000) % 1000) / 10);\n        if (seconds < 10) {\n            seconds = \"0\" + seconds;\n        }\n        if (!showMilliseconds) {\n            return `${minutes}:${seconds}`;\n        }\n        return `${minutes}:${seconds}.${millis}`;\n    },\n\n    getAnnotationForTimestamp: (timeStampMs, annotations) => {\n        let resultAnnotation = null;\n        annotations.forEach(annotation => {\n            if (\n                timeStampMs <\n                    annotation.timestamp + annotation.totalDuration / 2 &&\n                timeStampMs >\n                    annotation.timestamp - annotation.totalDuration / 2\n            ) {\n                resultAnnotation = annotation;\n            }\n        });\n        return resultAnnotation;\n    }\n};\n\nexport default Utils;\n","import React, { Component } from \"react\";\nimport RecordingState from \"./RecordingState\";\nimport { withStyles } from \"@material-ui/styles\";\nimport Utils from \"./Utils\";\n\nconst BAR_WIDTH_PX = 3;\nconst REFRESH_INTERVAL_MS = 60;\nconst CANVAS_MIN_WIDTH = 1000;\n\nconst styles = {\n    Scroll: {\n        width: CANVAS_MIN_WIDTH,\n        overflow: \"hidden\",\n        direction: \"rtl\",\n        margin: \"20px\",\n        alignSelf: \"center\",\n        alignItems: \"center\"\n    },\n    Canvas: {\n        float: \"right\",\n        height: \"300px\"\n    }\n};\n\nclass AudioVisualizer extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            audioArray: [],\n            width: 0\n        };\n\n        this.canvas = React.createRef();\n    }\n\n    componentDidUpdate = (prevProps, prevState) => {\n        if (prevState.audioArray !== this.state.audioArray) {\n            this._draw();\n        }\n        const prevStream = prevProps.stream;\n        const stream = this.props.stream;\n        if (prevStream == null && stream != null) {\n            this.audioContext = new (window.AudioContext ||\n                window.webkitAudioContext)();\n\n            this.analyser = this.audioContext.createAnalyser();\n            this.analyser.smoothingTimeConstant = 0;\n            this.dataArray = new Uint8Array(this.analyser.frequencyBinCount);\n\n            if (stream) {\n                this.source = this.audioContext.createMediaStreamSource(stream);\n                this.source.connect(this.analyser);\n            }\n\n            this.timerID = setInterval(() => {\n                if (this.props.recordingState === RecordingState.RECORDING) {\n                    this._onRefreshVisualizer();\n                }\n            }, REFRESH_INTERVAL_MS);\n        } else if (prevStream && stream == null) {\n            this.setState({\n                audioArray: [],\n                width: CANVAS_MIN_WIDTH\n            });\n        }\n    };\n\n    componentWillUnmount = () => {\n        clearInterval(this.timerID);\n        if (this.analyser) {\n            this.analyser.disconnect();\n        }\n        if (this.source) {\n            this.source.disconnect();\n        }\n    };\n\n    stop = () => {\n        clearInterval(this.timerID);\n    };\n\n    _onRefreshVisualizer = () => {\n        this.analyser.getByteFrequencyData(this.dataArray);\n        let values = 0;\n        for (var i = 0; i < this.dataArray.length; i++) {\n            values += this.dataArray[i];\n        }\n\n        let newAudioArray = [...this.state.audioArray];\n        const currentAnnotation =\n            this.props.annotations &&\n            Utils.getAnnotationForTimestamp(\n                this.props.elapsedTimeMs,\n                this.props.annotations\n            );\n        if (currentAnnotation != null) {\n            const annotatedValues = this.state.audioArray\n                .slice(\n                    -(currentAnnotation.totalDuration / 2 / REFRESH_INTERVAL_MS)\n                )\n                .map(\n                    chunk =>\n                        (chunk = {\n                            amplitude: chunk.amplitude,\n                            annotated: true,\n                            timestamp: chunk.elapsedTimeMs\n                        })\n                );\n\n            newAudioArray.splice(\n                newAudioArray.length - annotatedValues.length,\n                currentAnnotation.totalDuration / 2 / REFRESH_INTERVAL_MS,\n                ...annotatedValues\n            );\n        }\n\n        const average = values / this.dataArray.length;\n        this.setState({\n            width: this.state.audioArray.length * BAR_WIDTH_PX,\n            audioArray: [\n                ...newAudioArray,\n                {\n                    amplitude: average,\n                    annotated: currentAnnotation != null,\n                    timestamp: this.props.elapsedTimeMs\n                }\n            ]\n        });\n    };\n\n    _draw = () => {\n        const canvas = this.canvas.current;\n\n        const height = canvas.height;\n        const width = canvas.width;\n\n        const context = canvas.getContext(\"2d\");\n\n        context.clearRect(0, 0, width, height);\n\n        this.state.audioArray.forEach((chunk, index) => {\n            const barHeight = 2 + chunk.amplitude;\n            const opacity = 0.2 + barHeight / 50;\n            const redColor = \"rgba(244, 67, 54,\" + opacity + \")\";\n            const goldColor = \"rgba(255, 196, 0,\" + opacity + \")\";\n            context.fillStyle = chunk.annotated ? goldColor : redColor;\n\n            context.fillRect(\n                index * BAR_WIDTH_PX,\n                height / 2 - barHeight,\n                BAR_WIDTH_PX * 0.6,\n                barHeight * 2\n            );\n        });\n    };\n\n    render() {\n        const { classes } = this.props;\n        return (\n            <div className={classes.Scroll}>\n                <canvas\n                    className={classes.Canvas}\n                    width={this.state.width}\n                    ref={this.canvas}\n                />\n            </div>\n        );\n    }\n}\n\nexport default withStyles(styles)(AudioVisualizer);\n","export default class RecordingTimeManager {\n    constructor(onIntervalTick, interval) {\n        this._recordingInterval = null;\n        this._recordingStartTimeMs = null;\n        this._recordingPausedPeriods = {};\n        this._currentRecordingPausedStartTime = null;\n        this._onIntervalTick = onIntervalTick;\n        this._interval = interval;\n    }\n\n    setOnIntervalTick(onIntervalTick) {\n        this._onIntervalTick = onIntervalTick;\n    }\n\n    start = () => {\n        this._recordingStartTimeMs = Date.now();\n        this._recordingInterval = setInterval(() => {\n            this._onIntervalTick &&\n                this._onIntervalTick(this.getElapsedTimeMs());\n        }, this._interval && this._interval);\n    };\n\n    pause = () => {\n        this._currentRecordingPausedStartTime = Date.now();\n        this._recordingPausedPeriods[\n            this._currentRecordingPausedStartTime\n        ] = null;\n    };\n\n    resume = () => {\n        this._recordingPausedPeriods[\n            this._currentRecordingPausedStartTime\n        ] = Date.now();\n        this._currentRecordingPausedStartTime = null;\n    };\n\n    stop = () => {\n        clearInterval(this._recordingInterval);\n        this._recordingInterval = null;\n        this._recordingStartTimeMs = null;\n        this._recordingPausedPeriods = {};\n        this._currentRecordingPausedStartTime = null;\n    };\n\n    isStarted = () => this._recordingInterval;\n\n    getElapsedTimeMs = () => {\n        const nowMs = Date.now();\n        const totalPausedTimeMs = Object.keys(this._recordingPausedPeriods)\n            .map(startTime => {\n                let endTime = this._recordingPausedPeriods[startTime] || nowMs;\n                return endTime - startTime;\n            })\n            .reduce((total, currentDuration) => total + currentDuration, 0);\n        const elapsedRecordingTimeMs =\n            nowMs - this._recordingStartTimeMs - totalPausedTimeMs;\n        return elapsedRecordingTimeMs;\n    };\n}\n","import uuid from \"uuid\";\nexport class Annotation {\n    constructor(type, timestamp, totalDuration) {\n        this.id = uuid.v4();\n        this.timestamp = timestamp;\n        this.totalDuration = totalDuration;\n        this.type = type;\n    }\n}\n\nexport class ActionItemAnnotation extends Annotation {\n    constructor(timestamp) {\n        super(\"Action Item\", timestamp, 10000);\n    }\n}\n","import React, { Component } from \"react\";\n\nimport { RecordRTCPromisesHandler, getSeekableBlob } from \"recordrtc\";\n\nimport ActionButton from \"./ActionButton\";\nimport RecordButton from \"./RecordButton\";\nimport AudioVisualizer from \"./AudioVisualizer\";\nimport RecordingTimeManager from \"./RecordingTimeManager\";\nimport RecordingState, { RecordingStateActions } from \"./RecordingState\";\nimport Utils from \"./Utils\";\nimport { ActionItemAnnotation } from \"./Annotation\";\n\nimport { withStyles } from \"@material-ui/styles\";\nimport Grid from \"@material-ui/core/Grid\";\n\nconst styles = {\n    Duration: {\n        margin: 0,\n        padding: \"30px\",\n        textAlign: \"center\",\n        color: \"#fff\",\n        fontSize: 50,\n        fontWeight: \"lighter\"\n    },\n    Grid: {\n        height: \"100%\"\n    },\n    AnnotationContainer: {\n        minHeight: \"100px\"\n    },\n    Annotation: {\n        padding: \"8px\"\n    },\n    AnnotationIcon: {\n        height: \"30px\",\n        width: \"30px\",\n        marginRight: \"2px\"\n    },\n    AudioContainer: {\n        minHeight: \"340px\"\n    },\n    AudioPlayer: {\n        width: \"800px\",\n        marginTop: \"100px\",\n        marginBottom: \"40px\"\n    }\n};\n\nclass RecordingScreen extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            recordingState: RecordingState.OFF,\n            elapsedTimeMs: 0,\n            stream: null\n        };\n\n        this._recordingTimeManager = new RecordingTimeManager(\n            this._onMsIntervalTick,\n            10\n        );\n    }\n\n    componentDidMount = () => {\n        const script = document.createElement(\"script\");\n        script.src = \"https://cdn.webrtc-experiment.com/EBML.js\";\n        script.async = true;\n        document.body.appendChild(script);\n    };\n\n    componentDidUpdate = async (prevProps, prevState) => {\n        const recordingStateAction = this.state.recordingState.compareToPrevious(\n            prevState.recordingState\n        );\n        switch (recordingStateAction) {\n            case RecordingStateActions.START:\n                let stream = await this._requestPermission();\n                this._recordingTimeManager.start();\n                this._recorder = new RecordRTCPromisesHandler(stream, {\n                    type: \"audio\"\n                });\n                await this._recorder.startRecording();\n                this.setState({\n                    recordingState: RecordingState.RECORDING,\n                    stream: stream\n                });\n                break;\n            case RecordingStateActions.STOP:\n                await this._recorder.stopRecording();\n                getSeekableBlob(\n                    await this._recorder.getBlob(),\n                    seekableBlob => {\n                        this._recordingTimeManager.stop();\n                        this._audioAnalyzer.stop();\n                        this.props.onAudioUrlAdded(\n                            URL.createObjectURL(seekableBlob)\n                        );\n                    }\n                );\n\n                break;\n            default:\n                break;\n        }\n    };\n\n    render() {\n        const { classes } = this.props;\n        return (\n            <Grid\n                container\n                direction=\"column\"\n                alignItems=\"center\"\n                className={classes.Grid}\n            >\n                <Grid item>\n                    <h1 className={classes.Duration}>\n                        {Utils.secondsToTimeString(\n                            this.state.elapsedTimeMs / 1000,\n                            false\n                        )}\n                    </h1>\n                </Grid>\n                <Grid item>\n                    <RecordButton\n                        onClick={this._toggleRecording}\n                        recordingState={this.state.recordingState}\n                    />\n                </Grid>\n                <Grid item className={classes.AudioContainer}>\n                    <AudioVisualizer\n                        ref={element => {\n                            if (element) {\n                                this._audioAnalyzer = element;\n                            }\n                        }}\n                        recordingState={this.state.recordingState}\n                        stream={this.state.stream}\n                        annotations={this.props.annotations}\n                        elapsedTimeMs={this.state.elapsedTimeMs}\n                    />\n                </Grid>\n                <Grid item>\n                    <ActionButton\n                        name={\"Action Item\"}\n                        durationSecondsString={\"10s\"}\n                        onAnnotationButtonClicked={\n                            this._onAnnotationButtonClicked\n                        }\n                        disabled={this.state.stream == null}\n                    />\n                </Grid>\n            </Grid>\n        );\n    }\n\n    _onMsIntervalTick = elapsedTimeMs => {\n        this.setState({\n            elapsedTimeMs: elapsedTimeMs\n        });\n    };\n\n    _toggleRecording = async () => {\n        if (this.state.recordingState === RecordingState.RECORDING) {\n            this.setState({\n                recordingState: this.state.recordingState.stop()\n            });\n        } else if (this.state.recordingState === RecordingState.OFF) {\n            this.setState({\n                recordingState: this.state.recordingState.start()\n            });\n        }\n    };\n\n    _requestPermission = async () => {\n        let stream = await navigator.mediaDevices.getUserMedia({\n            video: false,\n            audio: true\n        });\n\n        return stream;\n    };\n\n    _onAnnotationButtonClicked = () => {\n        if (this.state.recordingState === RecordingState.RECORDING) {\n            const actionItem = new ActionItemAnnotation(\n                this.state.elapsedTimeMs\n            );\n            this.props.onAnnotationAdded(actionItem);\n        }\n    };\n}\n\nexport default withStyles(styles)(RecordingScreen);\n","import React, { Component } from \"react\";\n\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport ReplayIcon from \"@material-ui/icons/Replay\";\nimport PlayArrow from \"@material-ui/icons/PlayArrow\";\nimport Fab from \"@material-ui/core/Fab\";\nimport red from \"@material-ui/core/colors/red\";\nimport grey from \"@material-ui/core/colors/grey\";\n\nimport Utils from \"./Utils\";\n\nimport { withStyles } from \"@material-ui/styles\";\n\nconst styles = {\n    Header: {\n        margin: 0,\n        padding: \"30px\",\n        textAlign: \"center\",\n        color: \"#fff\",\n        fontSize: 50,\n        fontWeight: \"lighter\"\n    },\n    TableHeader: {\n        color: \"#fff\",\n        fontSize: 20,\n        fontWeight: \"lighter\"\n    },\n    TableCell: {\n        color: \"#fff\",\n        fontWeight: \"lighter\"\n    },\n    ResetButton: {\n        position: \"absolute\",\n        top: \"0px\",\n        left: \"0px\",\n        margin: \"30px\",\n        backgroundColor: red[\"600\"],\n        \"&:hover\": {\n            backgroundColor: red[\"200\"]\n        },\n        color: \"#fff\"\n    },\n    PlayButton: {\n        marginLeft: \"20px\",\n        backgroundColor: grey[\"300\"],\n        \"&:hover\": {\n            backgroundColor: grey[\"500\"]\n        }\n    }\n};\n\nclass SummaryScreen extends Component {\n    render() {\n        const { classes } = this.props;\n        return (\n            <>\n                <h2 className={classes.Header}>Summary</h2>\n                <Fab\n                    className={classes.ResetButton}\n                    aria-label=\"reset\"\n                    onClick={this.props.onReset}\n                >\n                    <ReplayIcon className={classes.RecordingButtonLabel} />\n                </Fab>\n                <Table>\n                    <TableHead className={classes.TableHeader}>\n                        <TableRow>\n                            <TableCell className={classes.TableHeader}>\n                                Type\n                            </TableCell>\n                            <TableCell\n                                align=\"right\"\n                                className={classes.TableHeader}\n                            >\n                                Time\n                            </TableCell>\n                            <TableCell\n                                align=\"right\"\n                                className={classes.TableHeader}\n                            >\n                                Duration (s)\n                            </TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {this.props.annotations.map(annotation => (\n                            <TableRow key={annotation.id}>\n                                <TableCell\n                                    component=\"th\"\n                                    scope=\"row\"\n                                    className={classes.TableCell}\n                                >\n                                    {annotation.type}\n                                    <Fab\n                                        size={\"small\"}\n                                        className={classes.PlayButton}\n                                    >\n                                        <PlayArrow />\n                                    </Fab>\n                                </TableCell>\n                                <TableCell\n                                    align=\"right\"\n                                    className={classes.TableCell}\n                                >\n                                    {Utils.secondsToTimeString(\n                                        annotation.timestamp / 1000,\n                                        true\n                                    )}\n                                </TableCell>\n                                <TableCell\n                                    align=\"right\"\n                                    className={classes.TableCell}\n                                >\n                                    {annotation.totalDuration / 1000}\n                                </TableCell>\n                            </TableRow>\n                        ))}\n                    </TableBody>\n                </Table>\n            </>\n        );\n    }\n}\n\nexport default withStyles(styles)(SummaryScreen);\n","import React, { Component } from \"react\";\n\nimport RecordingScreen from \"./RecordingScreen\";\nimport SummaryScreen from \"./SummaryScreen\";\n\nimport blueGrey from \"@material-ui/core/colors/blueGrey\";\nimport { withStyles } from \"@material-ui/styles\";\nimport Container from \"@material-ui/core/Container\";\n\nconst styles = {\n    App: {\n        height: \"100%\",\n        textAlign: \"center\",\n        background: blueGrey[800]\n    }\n};\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            audioUrl: null,\n            annotations: []\n        };\n    }\n\n    render() {\n        const { classes } = this.props;\n        return (\n            <Container className={classes.App} maxWidth={false}>\n                {this.state.audioUrl == null ? (\n                    <RecordingScreen\n                        annotations={this.state.annotations}\n                        onAudioUrlAdded={this._onAudioUrlAdded}\n                        onAnnotationAdded={this._onAnnotationAdded}\n                    />\n                ) : (\n                    <SummaryScreen\n                        audioUrl={this.state.audioUrl}\n                        annotations={this.state.annotations}\n                        onReset={this._onReset}\n                    />\n                )}\n            </Container>\n        );\n    }\n\n    _onAudioUrlAdded = url => {\n        this.setState({\n            audioUrl: url\n        });\n    };\n\n    _onAnnotationAdded = annotation => {\n        this.setState(state => {\n            return {\n                ...state,\n                annotations: [...state.annotations, annotation]\n            };\n        });\n    };\n\n    _onReset = () => {\n        this.setState({\n            audioUrl: null\n        });\n    };\n}\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}