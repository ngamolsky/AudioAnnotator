{"version":3,"sources":["ActionButton.js","RecordingState.js","RecordButton.js","Utils.js","AudioVisualizer.js","RecordingTimeManager.js","Annotation.js","RecordingScreen.js","SummaryScreen.js","App.js","serviceWorker.js","index.js"],"names":["ActionButton","_this","this","_this$props","props","classes","annotationCount","react_default","a","createElement","Badge","color","badgeContent","className","Button","variant","onClick","onAnnotationButtonClicked","name","disabled","Component","withStyles","theme","height","width","fontSize","fontWeight","margin","spacing","RecordingStateActions","NONE","START","STOP","PAUSE","RESUME","TOKEN","token","RecordingState","status","Object","classCallCheck","Error","_status","RECORDING","PAUSED","OFF","STARTING","STOPPING","prevRecordingState","styles","RecordingButton","backgroundColor","red","&:hover","RecordingButtonLabel","RecordButton","Fab","aria-label","recordingState","Stop_default","Mic_default","React","Utils","secondsToTimeString","totalSeconds","showMilliseconds","minutes","Math","floor","seconds","millis","concat","getAnnotationsForTimestamp","timeStampMs","annotations","resultAnnotations","forEach","annotation","timestamp","totalDuration","push","REFRESH_INTERVAL_MS","MAX_BARD_WIDTH","AudioVisualizer","possibleConstructorReturn","getPrototypeOf","call","componentDidUpdate","prevProps","prevState","canvas","current","requestAnimationFrame","_draw","prevStream","stream","audioContext","window","AudioContext","webkitAudioContext","analyser","createAnalyser","smoothingTimeConstant","dataArray","Uint8Array","frequencyBinCount","source","createMediaStreamSource","connect","timerID","setInterval","_onRefreshVisualizer","setState","state","objectSpread","audioArray","console","log","canvasSize","addEventListener","event","rect","target","getBoundingClientRect","mousePosition","x","clientX","left","y","clientY","top","componentWillUnmount","clearInterval","cancelAnimationFrame","disconnect","stop","getByteFrequencyData","values","i","length","averageAmplitude","newAudioArray","toConsumableArray","shift","amplitude","elapsedTimeMs","totalArray","arrayLength","context","getContext","clearRect","chunk","index","currentAnnotations","barHeight","barWidth","redColor","whiteColor","fillStyle","fillRect","createRef","_this2","index_esm","bounds","onResize","contentRect","_ref","measureRef","ref","Visualizer","Canvas","display","RecordingTimeManager","onIntervalTick","interval","start","_recordingStartTimeMs","Date","now","_recordingInterval","_onIntervalTick","getElapsedTimeMs","_interval","pause","_currentRecordingPausedStartTime","_recordingPausedPeriods","resume","isStarted","nowMs","totalPausedTimeMs","keys","map","startTime","reduce","total","currentDuration","ActionItemAnnotation","_Annotation","inherits","Annotation","type","getStartTimeMs","getEndTimeMs","id","uuid","v4","RecordingScreen","componentDidMount","script","document","src","async","body","appendChild","asyncToGenerator","regenerator_default","mark","_callee","recordingStateAction","wrap","_context","prev","next","compareToPrevious","t0","_requestPermission","sent","_recordingTimeManager","_recorder","RecordRTCPromisesHandler","startRecording","abrupt","stopRecording","t1","getSeekableBlob","getBlob","t2","t3","seekableBlob","_audioAnalyzer","onAudioUrlAdded","URL","createObjectURL","_x","_x2","apply","arguments","_onMsIntervalTick","_toggleRecording","_callee2","_context2","_callee3","_context3","navigator","mediaDevices","getUserMedia","video","audio","_onAnnotationButtonClicked","actionItem","onAnnotationAdded","Box","flexDirection","justifyContent","Container","Duration","src_RecordButton","flexGrow","src_AudioVisualizer","element","src_ActionButton","padding","textAlign","AnnotationIcon","marginRight","marginBottom","SummaryScreen","_onAnnotationPlayed","_audioPlayer","audioEl","currentTime","play","audioUrl","Fragment","Header","bundle_default","AudioPlayer","controls","ResetButton","onReset","Replay_default","Table","TableHead","TableHeader","TableRow","TableCell","align","TableBody","key","component","scope","size","PlayArrow_default","position","createMuiTheme","palette","primary","main","secondary","indigo","App","background","default","_onAudioUrlAdded","url","_onAnnotationAdded","_onReset","ThemeProvider","maxWidth","src_RecordingScreen","src_SummaryScreen","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e843f6fa.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { withStyles } from \"@material-ui/styles\";\nimport { Badge, Button } from \"@material-ui/core\";\n\nconst styles = theme => {\n    return {\n        ActionButton: {\n            height: \"60px\",\n            width: \"200px\",\n            fontSize: 24,\n            fontWeight: \"lighter\"\n        },\n        Badge: {\n            margin: theme.spacing(2)\n        }\n    };\n};\n\nclass ActionButton extends Component {\n    render() {\n        const { classes, annotationCount } = this.props;\n        return (\n            <Badge\n                color=\"primary\"\n                badgeContent={annotationCount}\n                className={classes.Badge}\n            >\n                <Button\n                    color=\"primary\"\n                    variant=\"contained\"\n                    className={classes.ActionButton}\n                    onClick={() => {\n                        this.props.onAnnotationButtonClicked(this.props.name);\n                    }}\n                    disabled={this.props.disabled}\n                >\n                    {this.props.name}\n                </Button>\n            </Badge>\n        );\n    }\n}\n\nexport default withStyles(styles)(ActionButton);\n","export const RecordingStateActions = {\n    NONE: \"NONE\",\n    START: \"START\",\n    STOP: \"STOP\",\n    PAUSE: \"PAUSE\",\n    RESUME: \"RESUME\"\n};\n\n// Make RecordingState's constructor effectively private by requiring this token\n// to construct, which is only available in this file.\nconst TOKEN = { token: \"unique recording state token\" };\n\nclass RecordingState {\n    constructor(token, status) {\n        if (token !== TOKEN) {\n            throw new Error(\n                \"RecordingState is an enum and should not be constructed directly; \" +\n                    \"please use an existing RecordingState.* declared in recording_state.es6.js\"\n            );\n        }\n\n        this._status = status;\n    }\n\n    isActive() {\n        return (\n            this === RecordingState.RECORDING || this === RecordingState.PAUSED\n        );\n    }\n\n    isRecording() {\n        return this === RecordingState.RECORDING;\n    }\n\n    isPaused() {\n        return this === RecordingState.PAUSED;\n    }\n\n    isOff() {\n        return this === RecordingState.OFF;\n    }\n\n    isStartingOrStopping() {\n        return (\n            this === RecordingState.STARTING || this === RecordingState.STOPPING\n        );\n    }\n\n    start() {\n        if (this === RecordingState.OFF) {\n            return RecordingState.STARTING;\n        } else {\n            return this;\n        }\n    }\n\n    stop() {\n        if (this === RecordingState.OFF) {\n            return RecordingState.OFF;\n        } else {\n            return RecordingState.STOPPING;\n        }\n    }\n\n    pause() {\n        return RecordingState.PAUSED;\n    }\n\n    resume() {\n        return RecordingState.RECORDING;\n    }\n\n    compareToPrevious(prevRecordingState) {\n        if (\n            this === RecordingState.STARTING &&\n            prevRecordingState === RecordingState.OFF\n        ) {\n            return RecordingStateActions.START;\n        } else if (\n            this === RecordingState.STOPPING &&\n            prevRecordingState !== RecordingState.STOPPING\n        ) {\n            return RecordingStateActions.STOP;\n        } else if (\n            this === RecordingState.RECORDING &&\n            prevRecordingState === RecordingState.PAUSED\n        ) {\n            return RecordingStateActions.RESUME;\n        } else if (\n            this === RecordingState.PAUSED &&\n            prevRecordingState === RecordingState.RECORDING\n        ) {\n            return RecordingStateActions.PAUSE;\n        }\n        return RecordingStateActions.NONE;\n    }\n}\n\nRecordingState.OFF = new RecordingState(TOKEN, \"OFF\");\nRecordingState.STARTING = new RecordingState(TOKEN, \"STARTING\");\nRecordingState.RECORDING = new RecordingState(TOKEN, \"RECORDING\");\nRecordingState.PAUSED = new RecordingState(TOKEN, \"PAUSED\");\nRecordingState.STOPPING = new RecordingState(TOKEN, \"STOPPING\");\n\nexport default RecordingState;\n","import React from \"react\";\nimport { withStyles } from \"@material-ui/styles\";\nimport Fab from \"@material-ui/core/Fab\";\nimport Mic from \"@material-ui/icons/Mic\";\nimport Stop from \"@material-ui/icons/Stop\";\nimport RecordingState from \"./RecordingState\";\n\nimport red from \"@material-ui/core/colors/red\";\n\nconst styles = {\n    RecordingButton: {\n        backgroundColor: red[\"600\"],\n        \"&:hover\": {\n            backgroundColor: red[\"200\"]\n        },\n        color: \"#fff\"\n    },\n    RecordingButtonLabel: {\n        height: \"30px\",\n        width: \"30px\"\n    }\n};\n\nclass RecordButton extends React.Component {\n    render() {\n        const { classes } = this.props;\n\n        return (\n            <Fab\n                className={classes.RecordingButton}\n                aria-label=\"record\"\n                onClick={this.props.onClick}\n            >\n                {this.props.recordingState === RecordingState.RECORDING ? (\n                    <Stop className={classes.RecordingButtonLabel} />\n                ) : (\n                    <Mic className={classes.RecordingButtonLabel} />\n                )}\n            </Fab>\n        );\n    }\n}\n\nexport default withStyles(styles)(RecordButton);\n","const Utils = {\n    secondsToTimeString: (totalSeconds, showMilliseconds) => {\n        let minutes = Math.floor(totalSeconds / 60);\n        let seconds = Math.floor(totalSeconds % 60);\n        let millis = Math.floor(((totalSeconds * 1000) % 1000) / 10);\n        if (seconds < 10) {\n            seconds = \"0\" + seconds;\n        }\n        if (!showMilliseconds) {\n            return `${minutes}:${seconds}`;\n        }\n        return `${minutes}:${seconds}.${millis}`;\n    },\n\n    getAnnotationsForTimestamp: (timeStampMs, annotations) => {\n        let resultAnnotations = [];\n        annotations.forEach(annotation => {\n            if (\n                timeStampMs <\n                    annotation.timestamp + annotation.totalDuration / 2 &&\n                timeStampMs >\n                    annotation.timestamp - annotation.totalDuration / 2\n            ) {\n                resultAnnotations.push(annotation);\n            }\n        });\n        return resultAnnotations;\n    }\n};\n\nexport default Utils;\n","import React, { Component } from \"react\";\nimport Measure from \"react-measure\";\n\nimport RecordingState from \"./RecordingState\";\nimport { withStyles } from \"@material-ui/styles\";\nimport Utils from \"./Utils\";\n\nconst REFRESH_INTERVAL_MS = 60;\nconst MAX_BARD_WIDTH = 6;\n\nconst styles = {\n    Canvas: {\n        display: \"block\"\n    },\n    Visualizer: {\n        width: \"80%\",\n        height: \"200px\",\n        margin: \"auto\"\n    }\n};\n\nclass AudioVisualizer extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            audioArray: [],\n            mousePosition: {\n                x: 0,\n                y: 0\n            },\n            canvasSize: {\n                width: -1,\n                height: -1\n            },\n            totalArray: []\n        };\n        this.canvas = React.createRef();\n    }\n\n    componentDidUpdate = (prevProps, prevState) => {\n        if (this.canvas && this.canvas.current) {\n            requestAnimationFrame(this._draw);\n        }\n        const prevStream = prevProps.stream;\n        const stream = this.props.stream;\n        if (prevStream == null && stream != null) {\n            this.audioContext = new (window.AudioContext ||\n                window.webkitAudioContext)();\n\n            this.analyser = this.audioContext.createAnalyser();\n            this.analyser.smoothingTimeConstant = 0;\n            this.dataArray = new Uint8Array(this.analyser.frequencyBinCount);\n\n            if (stream) {\n                this.source = this.audioContext.createMediaStreamSource(stream);\n                this.source.connect(this.analyser);\n            }\n\n            this.timerID = setInterval(() => {\n                if (this.props.recordingState === RecordingState.RECORDING) {\n                    this._onRefreshVisualizer();\n                }\n            }, REFRESH_INTERVAL_MS);\n        } else if (prevStream && stream == null) {\n            this.setState(\n                state => {\n                    return {\n                        ...state,\n                        audioArray: []\n                    };\n                },\n                () => {\n                    console.log(\"WHY\");\n                    this._draw();\n                }\n            );\n        }\n\n        if (prevState.canvasSize.width < 0 && this.state.canvasSize.width > 0) {\n            this.canvas.current.addEventListener(\"mousemove\", event => {\n                var rect = event.target.getBoundingClientRect();\n                this.setState({\n                    mousePosition: {\n                        x: event.clientX - rect.left,\n                        y: event.clientY - rect.top\n                    }\n                });\n            });\n        }\n    };\n\n    componentWillUnmount = () => {\n        clearInterval(this.timerID);\n        cancelAnimationFrame(this._draw);\n        if (this.analyser) {\n            this.analyser.disconnect();\n        }\n        if (this.source) {\n            this.source.disconnect();\n        }\n    };\n\n    stop = () => {\n        clearInterval(this.timerID);\n    };\n\n    _onRefreshVisualizer = () => {\n        this.analyser.getByteFrequencyData(this.dataArray);\n        let values = 0;\n        for (var i = 0; i < this.dataArray.length; i++) {\n            values += this.dataArray[i];\n        }\n        const averageAmplitude = values / this.dataArray.length;\n\n        this.setState(state => {\n            let newAudioArray = [...state.audioArray];\n            if (\n                state.audioArray.length >=\n                Math.floor(state.canvasSize.width / MAX_BARD_WIDTH)\n            ) {\n                newAudioArray.shift();\n            }\n\n            return {\n                audioArray: [\n                    ...newAudioArray,\n                    {\n                        amplitude: averageAmplitude,\n                        timestamp: this.props.elapsedTimeMs,\n                        x: Math.floor(MAX_BARD_WIDTH * state.audioArray.length)\n                    }\n                ],\n                totalArray: [\n                    ...state.totalArray,\n                    {\n                        amplitude: averageAmplitude,\n                        timestamp: this.props.elapsedTimeMs,\n                        x: Math.floor(MAX_BARD_WIDTH * state.audioArray.length)\n                    }\n                ]\n            };\n        });\n    };\n\n    _draw = () => {\n        const canvas = this.canvas.current;\n\n        if (canvas) {\n            const height = canvas.height;\n            const width = canvas.width;\n            const arrayLength = this.state.audioArray.length;\n            const context = canvas.getContext(\"2d\");\n            context.clearRect(0, 0, width, height);\n\n            if (arrayLength === 0) {\n                this.state.totalArray.forEach((chunk, index) => {\n                    const currentAnnotations = Utils.getAnnotationsForTimestamp(\n                        chunk.timestamp,\n                        this.props.annotations ? this.props.annotations : []\n                    );\n\n                    const barHeight = 2 + chunk.amplitude;\n                    const barWidth =\n                        this.state.canvasSize.width /\n                        this.state.totalArray.length;\n                    const redOpacity = 0.2 + barHeight / 50;\n                    const whiteOpacity = currentAnnotations.length / 5;\n                    const redColor = \"rgba(244, 67, 54,\" + redOpacity + \")\";\n                    const whiteColor =\n                        \"rgba(255, 255, 255, \" + whiteOpacity + \")\";\n                    const rect = {\n                        x:\n                            width -\n                            (this.state.totalArray.length - index) * barWidth,\n                        y: height / 2 - barHeight,\n                        width: barWidth * 0.6,\n                        height: barHeight * 2\n                    };\n\n                    const isMouseOverRect =\n                        this.state.mousePosition.x > rect.x &&\n                        this.state.mousePosition.x < rect.x + barWidth;\n\n                    context.fillStyle =\n                        currentAnnotations.length > 0 ? whiteColor : redColor;\n\n                    context.fillRect(rect.x, rect.y, rect.width, rect.height);\n                });\n            } else {\n                this.state.audioArray.forEach((chunk, index) => {\n                    const currentAnnotations = Utils.getAnnotationsForTimestamp(\n                        chunk.timestamp,\n                        this.props.annotations ? this.props.annotations : []\n                    );\n\n                    const barHeight = 2 + chunk.amplitude;\n                    const redOpacity = 0.2 + barHeight / 50;\n                    const whiteOpacity = currentAnnotations.length / 5;\n                    const redColor = \"rgba(244, 67, 54,\" + redOpacity + \")\";\n                    const whiteColor =\n                        \"rgba(255, 255, 255, \" + whiteOpacity + \")\";\n                    const rect = {\n                        x: width - (arrayLength - index) * MAX_BARD_WIDTH,\n                        y: height / 2 - barHeight,\n                        width: MAX_BARD_WIDTH * 0.6,\n                        height: barHeight * 2\n                    };\n\n                    const isMouseOverRect =\n                        this.state.mousePosition.x > rect.x &&\n                        this.state.mousePosition.x < rect.x + MAX_BARD_WIDTH;\n\n                    context.fillStyle =\n                        currentAnnotations.length > 0 ? whiteColor : redColor;\n\n                    context.fillRect(rect.x, rect.y, rect.width, rect.height);\n                });\n            }\n        }\n    };\n\n    render() {\n        const { classes } = this.props;\n        return (\n            this.state.canvasSize != null && (\n                <Measure\n                    bounds\n                    margin\n                    onResize={contentRect => {\n                        this.setState({ canvasSize: contentRect.bounds });\n                    }}\n                >\n                    {({ measureRef }) => (\n                        <div ref={measureRef} className={classes.Visualizer}>\n                            <canvas\n                                className={classes.Canvas}\n                                ref={this.canvas}\n                                height={this.state.canvasSize.height}\n                                width={this.state.canvasSize.width}\n                            />\n                        </div>\n                    )}\n                </Measure>\n            )\n        );\n    }\n}\n\nexport default withStyles(styles)(AudioVisualizer);\n","export default class RecordingTimeManager {\n    constructor(onIntervalTick, interval) {\n        this._recordingInterval = null;\n        this._recordingStartTimeMs = null;\n        this._recordingPausedPeriods = {};\n        this._currentRecordingPausedStartTime = null;\n        this._onIntervalTick = onIntervalTick;\n        this._interval = interval;\n    }\n\n    setOnIntervalTick(onIntervalTick) {\n        this._onIntervalTick = onIntervalTick;\n    }\n\n    start = () => {\n        this._recordingStartTimeMs = Date.now();\n        this._recordingInterval = setInterval(() => {\n            this._onIntervalTick &&\n                this._onIntervalTick(this.getElapsedTimeMs());\n        }, this._interval && this._interval);\n    };\n\n    pause = () => {\n        this._currentRecordingPausedStartTime = Date.now();\n        this._recordingPausedPeriods[\n            this._currentRecordingPausedStartTime\n        ] = null;\n    };\n\n    resume = () => {\n        this._recordingPausedPeriods[\n            this._currentRecordingPausedStartTime\n        ] = Date.now();\n        this._currentRecordingPausedStartTime = null;\n    };\n\n    stop = () => {\n        clearInterval(this._recordingInterval);\n        this._recordingInterval = null;\n        this._recordingStartTimeMs = null;\n        this._recordingPausedPeriods = {};\n        this._currentRecordingPausedStartTime = null;\n    };\n\n    isStarted = () => this._recordingInterval;\n\n    getElapsedTimeMs = () => {\n        const nowMs = Date.now();\n        const totalPausedTimeMs = Object.keys(this._recordingPausedPeriods)\n            .map(startTime => {\n                let endTime = this._recordingPausedPeriods[startTime] || nowMs;\n                return endTime - startTime;\n            })\n            .reduce((total, currentDuration) => total + currentDuration, 0);\n        const elapsedRecordingTimeMs =\n            nowMs - this._recordingStartTimeMs - totalPausedTimeMs;\n        return elapsedRecordingTimeMs;\n    };\n}\n","import uuid from \"uuid\";\nexport class Annotation {\n    constructor(type, timestamp, totalDuration) {\n        this.id = uuid.v4();\n        this.timestamp = timestamp;\n        this.totalDuration = totalDuration;\n        this.type = type;\n    }\n\n    getStartTimeMs = () => {\n        return this.timestamp - this.totalDuration / 2;\n    };\n\n    getEndTimeMs = () => {\n        return this.timestamp + this.totalDuration / 2;\n    };\n}\n\nexport class ActionItemAnnotation extends Annotation {\n    constructor(timestamp) {\n        super(\"Action Item\", timestamp, 10000);\n    }\n}\n","import React, { Component } from \"react\";\n\nimport { RecordRTCPromisesHandler, getSeekableBlob } from \"recordrtc\";\n\nimport ActionButton from \"./ActionButton\";\nimport RecordButton from \"./RecordButton\";\nimport AudioVisualizer from \"./AudioVisualizer\";\nimport RecordingTimeManager from \"./RecordingTimeManager\";\nimport RecordingState, { RecordingStateActions } from \"./RecordingState\";\nimport Utils from \"./Utils\";\nimport { ActionItemAnnotation } from \"./Annotation\";\n\nimport { withStyles } from \"@material-ui/styles\";\nimport Box from \"@material-ui/core/Box\";\n\nconst styles = theme => {\n    return {\n        Duration: {\n            margin: 0,\n            padding: \"30px\",\n            textAlign: \"center\",\n            color: \"#fff\",\n            fontSize: 50,\n            fontWeight: \"lighter\"\n        },\n        Visualizer: {\n            width: \"80%\",\n            height: \"20%\"\n        },\n        Container: {\n            height: \"100%\"\n        },\n        Annotation: {\n            padding: \"8px\"\n        },\n        AnnotationIcon: {\n            height: \"30px\",\n            width: \"30px\",\n            marginRight: \"2px\"\n        },\n        ActionButton: {\n            marginBottom: \"40px\"\n        }\n    };\n};\n\nclass RecordingScreen extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            recordingState: RecordingState.OFF,\n            elapsedTimeMs: 0,\n            stream: null\n        };\n\n        this._recordingTimeManager = new RecordingTimeManager(\n            this._onMsIntervalTick,\n            10\n        );\n    }\n\n    componentDidMount = () => {\n        const script = document.createElement(\"script\");\n        script.src = \"https://cdn.webrtc-experiment.com/EBML.js\";\n        script.async = true;\n        document.body.appendChild(script);\n    };\n\n    componentDidUpdate = async (prevProps, prevState) => {\n        const recordingStateAction = this.state.recordingState.compareToPrevious(\n            prevState.recordingState\n        );\n        switch (recordingStateAction) {\n            case RecordingStateActions.START:\n                let stream = await this._requestPermission();\n                this._recordingTimeManager.start();\n                this._recorder = new RecordRTCPromisesHandler(stream, {\n                    type: \"audio\"\n                });\n                await this._recorder.startRecording();\n                this.setState({\n                    recordingState: RecordingState.RECORDING,\n                    stream: stream\n                });\n                break;\n            case RecordingStateActions.STOP:\n                await this._recorder.stopRecording();\n                getSeekableBlob(\n                    await this._recorder.getBlob(),\n                    seekableBlob => {\n                        this._recordingTimeManager.stop();\n                        this._audioAnalyzer.stop();\n                        this.props.onAudioUrlAdded(\n                            URL.createObjectURL(seekableBlob)\n                        );\n                    }\n                );\n\n                this.setState({\n                    recordingState: RecordingState.OFF,\n                    stream: null\n                });\n                break;\n            default:\n                break;\n        }\n    };\n\n    render() {\n        const { classes } = this.props;\n        return (\n            <Box\n                display=\"flex\"\n                flexDirection=\"column\"\n                justifyContent=\"center\"\n                className={classes.Container}\n            >\n                <Box>\n                    <h1 className={classes.Duration}>\n                        {Utils.secondsToTimeString(\n                            this.state.elapsedTimeMs / 1000,\n                            false\n                        )}\n                    </h1>\n                </Box>\n                <Box>\n                    <RecordButton\n                        onClick={this._toggleRecording}\n                        recordingState={this.state.recordingState}\n                    />\n                </Box>\n                <Box\n                    flexGrow={1}\n                    justifyContent=\"center\"\n                    display=\"flex\"\n                    flexDirection=\"column\"\n                >\n                    <Box>\n                        <AudioVisualizer\n                            ref={element => {\n                                if (element) {\n                                    this._audioAnalyzer = element;\n                                }\n                            }}\n                            recordingState={this.state.recordingState}\n                            stream={this.state.stream}\n                            annotations={this.props.annotations}\n                            elapsedTimeMs={this.state.elapsedTimeMs}\n                        />\n                    </Box>\n                </Box>\n                <Box className={classes.ActionButton}>\n                    <ActionButton\n                        name={\"Action Item\"}\n                        onAnnotationButtonClicked={\n                            this._onAnnotationButtonClicked\n                        }\n                        annotationCount={this.props.annotations.length}\n                        disabled={this.state.stream == null}\n                    />\n                </Box>\n            </Box>\n        );\n    }\n\n    _onMsIntervalTick = elapsedTimeMs => {\n        this.setState({\n            elapsedTimeMs: elapsedTimeMs\n        });\n    };\n\n    _toggleRecording = async () => {\n        if (this.state.recordingState === RecordingState.RECORDING) {\n            this.setState({\n                recordingState: this.state.recordingState.stop()\n            });\n        } else if (this.state.recordingState === RecordingState.OFF) {\n            this.setState({\n                recordingState: this.state.recordingState.start()\n            });\n        }\n    };\n\n    _requestPermission = async () => {\n        let stream = await navigator.mediaDevices.getUserMedia({\n            video: false,\n            audio: true\n        });\n\n        return stream;\n    };\n\n    _onAnnotationButtonClicked = () => {\n        if (this.state.recordingState === RecordingState.RECORDING) {\n            const actionItem = new ActionItemAnnotation(\n                this.state.elapsedTimeMs\n            );\n            this.props.onAnnotationAdded(actionItem);\n        }\n    };\n}\n\nexport default withStyles(styles)(RecordingScreen);\n","import React, { Component } from \"react\";\n\nimport ReactAudioPlayer from \"react-audio-player\";\n\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport ReplayIcon from \"@material-ui/icons/Replay\";\nimport PlayArrow from \"@material-ui/icons/PlayArrow\";\nimport Fab from \"@material-ui/core/Fab\";\n\nimport Utils from \"./Utils\";\n\nimport { withStyles } from \"@material-ui/styles\";\n\nconst styles = {\n    Header: {\n        margin: 0,\n        padding: \"30px\",\n        textAlign: \"center\",\n        color: \"#fff\",\n        fontSize: 50,\n        fontWeight: \"lighter\"\n    },\n    TableHeader: {\n        color: \"#fff\",\n        fontSize: 20,\n        fontWeight: \"lighter\"\n    },\n    TableCell: {\n        color: \"#fff\",\n        fontWeight: \"lighter\"\n    },\n    ResetButton: {\n        position: \"absolute\",\n        top: \"0px\",\n        left: \"0px\",\n        margin: \"30px\",\n        color: \"#fff\"\n    },\n    AudioPlayer: {\n        margin: \"20px\",\n        width: \"80%\"\n    }\n};\n\nclass SummaryScreen extends Component {\n    constructor(props) {\n        super(props);\n\n        this._audioPlayer = React.createRef();\n    }\n\n    render() {\n        const { classes, audioUrl } = this.props;\n        return (\n            <>\n                <h2 className={classes.Header}>Summary</h2>\n                <ReactAudioPlayer\n                    ref={this._audioPlayer}\n                    className={classes.AudioPlayer}\n                    controls\n                    src={audioUrl}\n                />\n                <Fab\n                    color={\"primary\"}\n                    className={classes.ResetButton}\n                    aria-label=\"reset\"\n                    onClick={this.props.onReset}\n                >\n                    <ReplayIcon className={classes.RecordingButtonLabel} />\n                </Fab>\n                <Table>\n                    <TableHead className={classes.TableHeader}>\n                        <TableRow>\n                            <TableCell className={classes.TableHeader} />\n                            <TableCell\n                                className={classes.TableHeader}\n                                align=\"right\"\n                            >\n                                Type\n                            </TableCell>\n                            <TableCell\n                                align=\"right\"\n                                className={classes.TableHeader}\n                            >\n                                Start Time\n                            </TableCell>\n                            <TableCell\n                                align=\"right\"\n                                className={classes.TableHeader}\n                            >\n                                End Time\n                            </TableCell>\n                            <TableCell\n                                align=\"right\"\n                                className={classes.TableHeader}\n                            >\n                                Duration (s)\n                            </TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {this.props.annotations &&\n                            this.props.annotations.map(annotation => (\n                                <TableRow key={annotation.id}>\n                                    <TableCell\n                                        component=\"th\"\n                                        scope=\"row\"\n                                        className={classes.TableCell}\n                                    >\n                                        <Fab\n                                            size={\"small\"}\n                                            onClick={() => {\n                                                this._onAnnotationPlayed(\n                                                    annotation\n                                                );\n                                            }}\n                                        >\n                                            <PlayArrow />\n                                        </Fab>\n                                    </TableCell>\n                                    <TableCell\n                                        component=\"th\"\n                                        scope=\"row\"\n                                        align=\"right\"\n                                        className={classes.TableCell}\n                                    >\n                                        {annotation.type}\n                                    </TableCell>\n                                    <TableCell\n                                        align=\"right\"\n                                        className={classes.TableCell}\n                                    >\n                                        {Utils.secondsToTimeString(\n                                            annotation.getStartTimeMs() > 0\n                                                ? annotation.getStartTimeMs() /\n                                                      1000\n                                                : 0,\n                                            true\n                                        )}\n                                    </TableCell>\n                                    <TableCell\n                                        align=\"right\"\n                                        className={classes.TableCell}\n                                    >\n                                        {Utils.secondsToTimeString(\n                                            annotation.getEndTimeMs() / 1000,\n                                            true\n                                        )}\n                                    </TableCell>\n                                    <TableCell\n                                        align=\"right\"\n                                        className={classes.TableCell}\n                                    >\n                                        {annotation.totalDuration / 1000}\n                                    </TableCell>\n                                </TableRow>\n                            ))}\n                    </TableBody>\n                </Table>\n            </>\n        );\n    }\n\n    _onAnnotationPlayed = annotation => {\n        if (this._audioPlayer) {\n            this._audioPlayer.current.audioEl.currentTime =\n                annotation.getStartTimeMs() / 1000;\n            this._audioPlayer.current.audioEl.play();\n        }\n    };\n}\n\nexport default withStyles(styles)(SummaryScreen);\n","import React, { Component } from \"react\";\n\nimport RecordingScreen from \"./RecordingScreen\";\nimport SummaryScreen from \"./SummaryScreen\";\n\nimport { indigo } from \"@material-ui/core/colors/\";\nimport { withStyles, ThemeProvider } from \"@material-ui/styles\";\nimport { createMuiTheme } from \"@material-ui/core/styles\";\n\nimport Container from \"@material-ui/core/Container\";\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: {\n            main: \"#e53935\"\n        },\n        secondary: indigo,\n        type: \"dark\"\n    }\n});\n\nconst styles = {\n    App: {\n        height: \"100%\",\n        textAlign: \"center\",\n        background: theme.palette.background.default\n    }\n};\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            audioUrl: null,\n            annotations: []\n        };\n    }\n\n    render() {\n        const { classes } = this.props;\n        return (\n            <ThemeProvider theme={theme}>\n                <Container className={classes.App} maxWidth={false}>\n                    {this.state.audioUrl == null ? (\n                        <RecordingScreen\n                            annotations={this.state.annotations}\n                            onAudioUrlAdded={this._onAudioUrlAdded}\n                            onAnnotationAdded={this._onAnnotationAdded}\n                        />\n                    ) : (\n                        <SummaryScreen\n                            audioUrl={this.state.audioUrl}\n                            annotations={this.state.annotations}\n                            onReset={this._onReset}\n                        />\n                    )}\n                </Container>\n            </ThemeProvider>\n        );\n    }\n\n    _onAudioUrlAdded = url => {\n        this.setState({\n            audioUrl: url\n        });\n    };\n\n    _onAnnotationAdded = annotation => {\n        this.setState(state => {\n            console.log(state);\n            return {\n                ...state,\n                annotations: [...state.annotations, annotation]\n            };\n        });\n    };\n\n    _onReset = () => {\n        this.setState({\n            audioUrl: null,\n            annotations: []\n        });\n    };\n}\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}