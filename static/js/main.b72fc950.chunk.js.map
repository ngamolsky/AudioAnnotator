{"version":3,"sources":["ActionButton.js","AudioItem.js","RecordingState.js","RecordButton.js","AudioVisualizer.js","RecordingTimeManager.js","Utils.js","Annotation.js","App.js","serviceWorker.js","index.js"],"names":["styles","ActionButton","height","width","fontSize","backgroundColor","props","disabled","grey","red","&:hover","color","fontWeight","marginTop","marginBottom","_this","this","classes","react_default","a","createElement","Button","className","onClick","onAnnotationButtonClicked","name","Component","withStyles","AudioItem","annotations","audioUrl","audioStream","Object","classCallCheck","hasMedia","stream","url","getAnnotationForTimestamp","timeStampMs","resultAnnotation","forEach","annotation","timestamp","totalDuration","RecordingStateActions","NONE","START","STOP","PAUSE","RESUME","TOKEN","token","RecordingState","status","Error","_status","RECORDING","PAUSED","OFF","STARTING","STOPPING","prevRecordingState","RecordingButton","RecordingButtonLabel","RecordButton","Fab","aria-label","recordingState","Stop_default","hasRecording","Replay_default","Mic_default","React","BAR_WIDTH_PX","REFRESH_INTERVAL_MS","CANVAS_MIN_WIDTH","Scroll","overflow","direction","margin","alignSelf","alignItems","Canvas","float","AudioVisualizer","possibleConstructorReturn","getPrototypeOf","call","componentDidUpdate","prevProps","prevState","audioArray","state","_draw","prevAudioItem","audioItem","audioContext","window","AudioContext","webkitAudioContext","analyser","createAnalyser","smoothingTimeConstant","dataArray","Uint8Array","frequencyBinCount","source","createMediaStreamSource","connect","console","log","timerID","setInterval","_onRefreshVisualizer","setState","componentWillUnmount","clearInterval","disconnect","stop","getByteFrequencyData","values","i","length","newAudioArray","toConsumableArray","currentAnnotation","elapsedTimeMs","annotatedValues","slice","map","chunk","amplitude","annotated","splice","apply","concat","average","canvas","current","context","getContext","clearRect","index","barHeight","opacity","redColor","goldColor","fillStyle","fillRect","createRef","ref","RecordingTimeManager","onIntervalTick","interval","start","_recordingStartTimeMs","Date","now","_recordingInterval","_onIntervalTick","getElapsedTimeMs","_interval","pause","_currentRecordingPausedStartTime","_recordingPausedPeriods","resume","isStarted","nowMs","totalPausedTimeMs","keys","startTime","reduce","total","currentDuration","Utils","secondsToTimeString","totalSeconds","minutes","Math","floor","seconds","ActionItemAnnotation","_Annotation","inherits","Annotation","type","id","uuid","v4","App","textAlign","background","blueGrey","Duration","padding","Grid","AnnotationContainer","minHeight","AnnotationIcon","marginRight","AudioContainer","AudioPlayer","componentDidMount","script","document","src","async","body","appendChild","_ref","asyncToGenerator","regenerator_default","mark","_callee","recordingStateAction","wrap","_context","prev","next","compareToPrevious","t0","requestPermission","sent","_recordingTimeManager","_recorder","RecordRTCPromisesHandler","startRecording","abrupt","stopRecording","t1","getSeekableBlob","getBlob","t2","t3","seekableBlob","_audioAnalyzer","objectSpread","URL","createObjectURL","_x","_x2","arguments","_onMsIntervalTick","toggleRecording","_callee2","_context2","_callee3","_context3","navigator","mediaDevices","getUserMedia","video","audio","_this2","Container","maxWidth","container","item","src_RecordButton","bundle_default","controls","player","_audioPlayer","src_AudioVisualizer","element","justify","key","variant","audioEl","currentTime","play","PlayArrow_default","src_ActionButton","durationSecondsString","_onAnnotationButtonClicked","_this3","buttonName","actionItem","newAudioItem","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b72fc950.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { withStyles } from \"@material-ui/styles\";\nimport Button from \"@material-ui/core/Button\";\n\nimport { red, grey } from \"@material-ui/core/colors/\";\n\nconst styles = {\n    ActionButton: {\n        height: \"60px\",\n        width: \"200px\",\n        fontSize: 24,\n        backgroundColor: props => (props.disabled ? grey[\"500\"] : red[\"500\"]),\n        \"&:hover\": {\n            backgroundColor: red[\"200\"]\n        },\n        color: \"#fff\",\n        fontWeight: \"lighter\",\n        marginTop: \"20px\",\n        marginBottom: \"60px\"\n    }\n};\n\nclass ActionButton extends Component {\n    render() {\n        const { classes } = this.props;\n\n        return (\n            <Button\n                className={classes.ActionButton}\n                onClick={() => {\n                    this.props.onAnnotationButtonClicked(this.props.name);\n                }}\n                disabled={this.props.disabled}\n            >\n                {this.props.name}\n            </Button>\n        );\n    }\n}\n\nexport default withStyles(styles)(ActionButton);\n","export default class AudioItem {\n    constructor(annotations, audioUrl, audioStream) {\n        this.annotations = annotations;\n        this.url = audioUrl;\n        this.stream = audioStream;\n    }\n\n    hasMedia = () => {\n        return (this.stream || this.url) != null;\n    };\n\n    getAnnotationForTimestamp = timeStampMs => {\n        let resultAnnotation;\n\n        if (this.annotations) {\n            this.annotations.forEach(annotation => {\n                if (\n                    timeStampMs <\n                        annotation.timestamp + annotation.totalDuration / 2 &&\n                    timeStampMs >\n                        annotation.timestamp - annotation.totalDuration / 2\n                ) {\n                    resultAnnotation = annotation;\n                }\n            });\n        }\n\n        return resultAnnotation;\n    };\n}\n","export const RecordingStateActions = {\n    NONE: \"NONE\",\n    START: \"START\",\n    STOP: \"STOP\",\n    PAUSE: \"PAUSE\",\n    RESUME: \"RESUME\"\n};\n\n// Make RecordingState's constructor effectively private by requiring this token\n// to construct, which is only available in this file.\nconst TOKEN = { token: \"unique recording state token\" };\n\nclass RecordingState {\n    constructor(token, status) {\n        if (token !== TOKEN) {\n            throw new Error(\n                \"RecordingState is an enum and should not be constructed directly; \" +\n                    \"please use an existing RecordingState.* declared in recording_state.es6.js\"\n            );\n        }\n\n        this._status = status;\n    }\n\n    isActive() {\n        return (\n            this === RecordingState.RECORDING || this === RecordingState.PAUSED\n        );\n    }\n\n    isRecording() {\n        return this === RecordingState.RECORDING;\n    }\n\n    isPaused() {\n        return this === RecordingState.PAUSED;\n    }\n\n    isOff() {\n        return this === RecordingState.OFF;\n    }\n\n    isStartingOrStopping() {\n        return (\n            this === RecordingState.STARTING || this === RecordingState.STOPPING\n        );\n    }\n\n    start() {\n        if (this === RecordingState.OFF) {\n            return RecordingState.STARTING;\n        } else {\n            return this;\n        }\n    }\n\n    stop() {\n        if (this === RecordingState.OFF) {\n            return RecordingState.OFF;\n        } else {\n            return RecordingState.STOPPING;\n        }\n    }\n\n    pause() {\n        return RecordingState.PAUSED;\n    }\n\n    resume() {\n        return RecordingState.RECORDING;\n    }\n\n    compareToPrevious(prevRecordingState) {\n        if (\n            this === RecordingState.STARTING &&\n            prevRecordingState === RecordingState.OFF\n        ) {\n            return RecordingStateActions.START;\n        } else if (\n            this === RecordingState.STOPPING &&\n            prevRecordingState !== RecordingState.STOPPING\n        ) {\n            return RecordingStateActions.STOP;\n        } else if (\n            this === RecordingState.RECORDING &&\n            prevRecordingState === RecordingState.PAUSED\n        ) {\n            return RecordingStateActions.RESUME;\n        } else if (\n            this === RecordingState.PAUSED &&\n            prevRecordingState === RecordingState.RECORDING\n        ) {\n            return RecordingStateActions.PAUSE;\n        }\n        return RecordingStateActions.NONE;\n    }\n}\n\nRecordingState.OFF = new RecordingState(TOKEN, \"OFF\");\nRecordingState.STARTING = new RecordingState(TOKEN, \"STARTING\");\nRecordingState.RECORDING = new RecordingState(TOKEN, \"RECORDING\");\nRecordingState.PAUSED = new RecordingState(TOKEN, \"PAUSED\");\nRecordingState.STOPPING = new RecordingState(TOKEN, \"STOPPING\");\n\nexport default RecordingState;\n","import React from \"react\";\nimport { withStyles } from \"@material-ui/styles\";\nimport Fab from \"@material-ui/core/Fab\";\nimport Mic from \"@material-ui/icons/Mic\";\nimport ReplayIcon from \"@material-ui/icons/Replay\";\nimport Stop from \"@material-ui/icons/Stop\";\nimport RecordingState from \"./RecordingState\";\n\nimport red from \"@material-ui/core/colors/red\";\n\nconst styles = {\n    RecordingButton: {\n        height: \"60px\",\n        width: \"60px\",\n        marginBottom: \"70px\",\n        backgroundColor: red[\"600\"],\n        \"&:hover\": {\n            backgroundColor: red[\"200\"]\n        },\n        color: \"#fff\"\n    },\n    RecordingButtonLabel: {\n        height: \"30px\",\n        width: \"30px\"\n    }\n};\n\nclass RecordButton extends React.Component {\n    render() {\n        const { classes } = this.props;\n\n        return (\n            <Fab\n                className={classes.RecordingButton}\n                aria-label=\"record\"\n                onClick={this.props.onClick}\n            >\n                {this.props.recordingState === RecordingState.RECORDING ? (\n                    <Stop className={classes.RecordingButtonLabel} />\n                ) : this.props.hasRecording ? (\n                    <ReplayIcon className={classes.RecordingButtonLabel} />\n                ) : (\n                    <Mic className={classes.RecordingButtonLabel} />\n                )}\n            </Fab>\n        );\n    }\n}\n\nexport default withStyles(styles)(RecordButton);\n","import React, { Component } from \"react\";\nimport RecordingState from \"./RecordingState\";\nimport { withStyles } from \"@material-ui/styles\";\n\nconst BAR_WIDTH_PX = 6;\nconst REFRESH_INTERVAL_MS = 60;\nconst CANVAS_MIN_WIDTH = 1000;\n\nconst styles = {\n    Scroll: {\n        width: CANVAS_MIN_WIDTH,\n        overflow: \"hidden\",\n        direction: \"rtl\",\n        margin: \"20px\",\n        alignSelf: \"center\",\n        alignItems: \"center\"\n    },\n    Canvas: {\n        float: \"right\",\n        height: \"300px\"\n    }\n};\n\nclass AudioVisualizer extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            audioArray: [],\n            width: 0\n        };\n\n        this.canvas = React.createRef();\n    }\n\n    componentDidUpdate = (prevProps, prevState) => {\n        if (prevState.audioArray !== this.state.audioArray) {\n            this._draw();\n        }\n        const prevAudioItem = prevProps.audioItem;\n        const audioItem = this.props.audioItem;\n        if (!prevAudioItem.hasMedia() && audioItem.hasMedia()) {\n            this.audioContext = new (window.AudioContext ||\n                window.webkitAudioContext)();\n\n            this.analyser = this.audioContext.createAnalyser();\n            this.analyser.smoothingTimeConstant = 0;\n            this.dataArray = new Uint8Array(this.analyser.frequencyBinCount);\n\n            if (audioItem.stream) {\n                this.source = this.audioContext.createMediaStreamSource(\n                    audioItem.stream\n                );\n                this.source.connect(this.analyser);\n            } else if (audioItem.url) {\n                console.log(\"HAVE URL\");\n            }\n\n            this.timerID = setInterval(() => {\n                if (this.props.recordingState === RecordingState.RECORDING) {\n                    this._onRefreshVisualizer();\n                }\n            }, REFRESH_INTERVAL_MS);\n        } else if (prevProps.audioStream && this.props.audioStream == null) {\n            this.setState({\n                audioArray: [],\n                width: CANVAS_MIN_WIDTH\n            });\n        }\n    };\n\n    componentWillUnmount = () => {\n        clearInterval(this.timerID);\n        console.log(this.analyser);\n        if (this.analyser) {\n            this.analyser.disconnect();\n        }\n        if (this.source) {\n            this.source.disconnect();\n        }\n    };\n\n    stop = () => {\n        clearInterval(this.timerID);\n    };\n\n    _onRefreshVisualizer = () => {\n        this.analyser.getByteFrequencyData(this.dataArray);\n        let values = 0;\n        for (var i = 0; i < this.dataArray.length; i++) {\n            values += this.dataArray[i];\n        }\n\n        let newAudioArray = [...this.state.audioArray];\n        const currentAnnotation =\n            this.props.audioItem &&\n            this.props.audioItem.getAnnotationForTimestamp(\n                this.props.elapsedTimeMs\n            );\n        if (currentAnnotation != null) {\n            const annotatedValues = this.state.audioArray\n                .slice(\n                    -(currentAnnotation.totalDuration / 2 / REFRESH_INTERVAL_MS)\n                )\n                .map(\n                    chunk =>\n                        (chunk = {\n                            amplitude: chunk.amplitude,\n                            annotated: true,\n                            timestamp: chunk.elapsedTimeMs\n                        })\n                );\n\n            newAudioArray.splice(\n                newAudioArray.length - annotatedValues.length,\n                currentAnnotation.totalDuration / 2 / REFRESH_INTERVAL_MS,\n                ...annotatedValues\n            );\n        }\n\n        const average = values / this.dataArray.length;\n        this.setState({\n            width: this.state.audioArray.length * BAR_WIDTH_PX,\n            audioArray: [\n                ...newAudioArray,\n                {\n                    amplitude: average,\n                    annotated: currentAnnotation != null,\n                    timestamp: this.props.elapsedTimeMs\n                }\n            ]\n        });\n    };\n\n    _draw = () => {\n        const canvas = this.canvas.current;\n\n        const height = canvas.height;\n        const width = canvas.width;\n\n        const context = canvas.getContext(\"2d\");\n\n        context.clearRect(0, 0, width, height);\n\n        this.state.audioArray.forEach((chunk, index) => {\n            const barHeight = 5 + chunk.amplitude;\n            const opacity = 0.2 + barHeight / 50;\n            const redColor = \"rgba(244, 67, 54,\" + opacity + \")\";\n            const goldColor = \"rgba(255, 196, 0,\" + opacity + \")\";\n            context.fillStyle = chunk.annotated ? goldColor : redColor;\n\n            context.fillRect(\n                index * BAR_WIDTH_PX,\n                height / 2 - barHeight,\n                BAR_WIDTH_PX * 0.6,\n                barHeight * 2\n            );\n        });\n    };\n\n    render() {\n        const { classes } = this.props;\n        return (\n            <div className={classes.Scroll}>\n                <canvas\n                    className={classes.Canvas}\n                    width={this.state.width}\n                    ref={this.canvas}\n                />\n            </div>\n        );\n    }\n}\n\nexport default withStyles(styles)(AudioVisualizer);\n","export default class RecordingTimeManager {\n    constructor(onIntervalTick, interval) {\n        this._recordingInterval = null;\n        this._recordingStartTimeMs = null;\n        this._recordingPausedPeriods = {};\n        this._currentRecordingPausedStartTime = null;\n        this._onIntervalTick = onIntervalTick;\n        this._interval = interval;\n    }\n\n    setOnIntervalTick(onIntervalTick) {\n        this._onIntervalTick = onIntervalTick;\n    }\n\n    start = () => {\n        this._recordingStartTimeMs = Date.now();\n        this._recordingInterval = setInterval(() => {\n            this._onIntervalTick &&\n                this._onIntervalTick(this.getElapsedTimeMs());\n        }, this._interval && this._interval);\n    };\n\n    pause = () => {\n        this._currentRecordingPausedStartTime = Date.now();\n        this._recordingPausedPeriods[\n            this._currentRecordingPausedStartTime\n        ] = null;\n    };\n\n    resume = () => {\n        this._recordingPausedPeriods[\n            this._currentRecordingPausedStartTime\n        ] = Date.now();\n        this._currentRecordingPausedStartTime = null;\n    };\n\n    stop = () => {\n        clearInterval(this._recordingInterval);\n        this._recordingInterval = null;\n        this._recordingStartTimeMs = null;\n        this._recordingPausedPeriods = {};\n        this._currentRecordingPausedStartTime = null;\n    };\n\n    isStarted = () => this._recordingInterval;\n\n    getElapsedTimeMs = () => {\n        const nowMs = Date.now();\n        const totalPausedTimeMs = Object.keys(this._recordingPausedPeriods)\n            .map(startTime => {\n                let endTime = this._recordingPausedPeriods[startTime] || nowMs;\n                return endTime - startTime;\n            })\n            .reduce((total, currentDuration) => total + currentDuration, 0);\n        const elapsedRecordingTimeMs =\n            nowMs - this._recordingStartTimeMs - totalPausedTimeMs;\n        return elapsedRecordingTimeMs;\n    };\n}\n","const Utils = {\n    secondsToTimeString: totalSeconds => {\n        let minutes = Math.floor(totalSeconds / 60);\n        let seconds = Math.floor(totalSeconds % 60);\n        if (seconds < 10) {\n            seconds = \"0\" + seconds;\n        }\n        return `${minutes}:${seconds}`;\n    }\n};\n\nexport default Utils;\n","import uuid from \"uuid\";\nexport class Annotation {\n    constructor(type, timestamp, totalDuration) {\n        this.id = uuid.v4();\n        this.timestamp = timestamp;\n        this.totalDuration = totalDuration;\n        this.type = type;\n    }\n}\n\nexport class ActionItemAnnotation extends Annotation {\n    constructor(timestamp) {\n        super(\"Action Item\", timestamp, 10000);\n    }\n}\n","import React, { Component } from \"react\";\n\nimport { RecordRTCPromisesHandler, getSeekableBlob } from \"recordrtc\";\n\nimport ActionButton from \"./ActionButton\";\nimport AudioItem from \"./AudioItem\";\nimport RecordButton from \"./RecordButton\";\nimport AudioVisualizer from \"./AudioVisualizer\";\nimport RecordingTimeManager from \"./RecordingTimeManager\";\nimport RecordingState, { RecordingStateActions } from \"./RecordingState\";\nimport Utils from \"./Utils\";\nimport ReactAudioPlayer from \"react-audio-player\";\nimport { ActionItemAnnotation } from \"./Annotation\";\n\nimport blueGrey from \"@material-ui/core/colors/blueGrey\";\nimport { withStyles } from \"@material-ui/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Container from \"@material-ui/core/Container\";\nimport Fab from \"@material-ui/core/Fab\";\n\nimport PlayArrow from \"@material-ui/icons/PlayArrow\";\n\nconst styles = {\n    App: {\n        height: \"100%\",\n        textAlign: \"center\",\n        background: blueGrey[800]\n    },\n    Duration: {\n        margin: 0,\n        padding: \"30px\",\n        textAlign: \"center\",\n        color: \"#fff\",\n        fontSize: 50,\n        fontWeight: \"lighter\"\n    },\n    Grid: {\n        height: \"100%\"\n    },\n    AnnotationContainer: {\n        minHeight: \"100px\"\n    },\n    Annotation: {\n        padding: \"8px\"\n    },\n    AnnotationIcon: {\n        height: \"30px\",\n        width: \"30px\",\n        marginRight: \"2px\"\n    },\n    AudioContainer: {\n        minHeight: \"340px\"\n    },\n    AudioPlayer: {\n        width: \"800px\",\n        marginTop: \"100px\",\n        marginBottom: \"40px\"\n    }\n};\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            recordingState: RecordingState.OFF,\n            audioItem: new AudioItem([], null, null),\n            elapsedTimeMs: 0\n        };\n\n        this._recordingTimeManager = new RecordingTimeManager(\n            this._onMsIntervalTick,\n            10\n        );\n    }\n\n    componentDidMount = () => {\n        const script = document.createElement(\"script\");\n        script.src = \"https://cdn.webrtc-experiment.com/EBML.js\";\n        script.async = true;\n        document.body.appendChild(script);\n    };\n\n    componentDidUpdate = async (prevProps, prevState) => {\n        const recordingStateAction = this.state.recordingState.compareToPrevious(\n            prevState.recordingState\n        );\n        switch (recordingStateAction) {\n            case RecordingStateActions.START:\n                let stream = await this.requestPermission();\n                this._recordingTimeManager.start();\n                this._recorder = new RecordRTCPromisesHandler(stream, {\n                    type: \"audio\"\n                });\n                await this._recorder.startRecording();\n                let annotations = this.state.audioItem.annotations;\n                this.setState({\n                    recordingState: RecordingState.RECORDING,\n                    audioItem: new AudioItem(annotations, null, stream)\n                });\n                break;\n            case RecordingStateActions.STOP:\n                await this._recorder.stopRecording();\n                getSeekableBlob(\n                    await this._recorder.getBlob(),\n                    seekableBlob => {\n                        this._recordingTimeManager.stop();\n                        this._audioAnalyzer.stop();\n                        this.setState({\n                            recordingState: RecordingState.OFF,\n                            audioItem: {\n                                ...this.state.audioItem,\n                                url: URL.createObjectURL(seekableBlob)\n                            },\n                            elapsedTimeMs: 0\n                        });\n                    }\n                );\n\n                break;\n            default:\n                break;\n        }\n    };\n\n    render() {\n        console.log(this.state.audioItem.stream || this.state.audioItem.url);\n        const { classes } = this.props;\n        return (\n            <Container className={classes.App} maxWidth={false}>\n                <Grid\n                    container\n                    direction=\"column\"\n                    alignItems=\"center\"\n                    className={classes.Grid}\n                >\n                    <Grid item>\n                        <h1 className={classes.Duration}>\n                            {Utils.secondsToTimeString(\n                                this.state.elapsedTimeMs / 1000\n                            )}\n                        </h1>\n                    </Grid>\n                    <Grid item>\n                        <RecordButton\n                            onClick={this.toggleRecording}\n                            recordingState={this.state.recordingState}\n                            hasRecording={\n                                this.state.audioItem &&\n                                this.state.audioItem.url != null\n                            }\n                        />\n                    </Grid>\n                    <Grid item className={classes.AudioContainer}>\n                        {this.state.audioItem && this.state.audioItem.url ? (\n                            <ReactAudioPlayer\n                                className={classes.AudioPlayer}\n                                src={this.state.audioItem.url}\n                                controls\n                                ref={player => {\n                                    if (player) {\n                                        this._audioPlayer = player;\n                                    }\n                                }}\n                            />\n                        ) : (\n                            <AudioVisualizer\n                                ref={element => {\n                                    if (element) {\n                                        this._audioAnalyzer = element;\n                                    }\n                                }}\n                                recordingState={this.state.recordingState}\n                                audioItem={this.state.audioItem}\n                                elapsedTimeMs={this.state.elapsedTimeMs}\n                            />\n                        )}\n                    </Grid>\n                    <Grid\n                        container\n                        direction=\"row\"\n                        justify=\"flex-start\"\n                        alignItems=\"center\"\n                        className={classes.AnnotationContainer}\n                    >\n                        {this.state.audioItem &&\n                            this.state.audioItem.annotations &&\n                            this.state.audioItem.annotations.length !== 0 &&\n                            this.state.audioItem.annotations.map(annotation => (\n                                <Grid\n                                    item\n                                    className={classes.Annotation}\n                                    key={annotation.id}\n                                >\n                                    <Fab\n                                        variant=\"extended\"\n                                        disabled={!this.state.audioItem.url}\n                                        onClick={() => {\n                                            if (\n                                                this.state.audioItem.url !=\n                                                    null &&\n                                                this._audioPlayer != null\n                                            ) {\n                                                if (this._audioPlayer.audioEl) {\n                                                    this._audioPlayer.audioEl.currentTime =\n                                                        (annotation.timestamp -\n                                                            annotation.totalDuration /\n                                                                2) /\n                                                        1000;\n\n                                                    this._audioPlayer.audioEl.play();\n                                                }\n                                            }\n                                        }}\n                                    >\n                                        <PlayArrow\n                                            className={classes.AnnotationIcon}\n                                        />\n                                        {annotation.type}\n                                    </Fab>\n                                </Grid>\n                            ))}\n                    </Grid>\n                    <Grid item>\n                        <ActionButton\n                            name={\"Action Item\"}\n                            durationSecondsString={\"10s\"}\n                            onAnnotationButtonClicked={this._onAnnotationButtonClicked()}\n                            disabled={\n                                this.state.audioItem.stream == null &&\n                                this.state.audioItem.url == null\n                            }\n                        />\n                    </Grid>\n                </Grid>\n            </Container>\n        );\n    }\n\n    _onMsIntervalTick = elapsedTimeMs => {\n        this.setState({\n            elapsedTimeMs: elapsedTimeMs\n        });\n    };\n\n    toggleRecording = async () => {\n        if (this.state.recordingState === RecordingState.RECORDING) {\n            this.setState({\n                recordingState: this.state.recordingState.stop()\n            });\n        } else if (this.state.recordingState === RecordingState.OFF) {\n            if (this.state.audioItem && this.state.audioItem.url == null) {\n                this.setState({\n                    recordingState: this.state.recordingState.start()\n                });\n            } else {\n                this.setState({\n                    audioItem: new AudioItem([], null, null)\n                });\n            }\n        }\n    };\n\n    requestPermission = async () => {\n        let stream = await navigator.mediaDevices.getUserMedia({\n            video: false,\n            audio: true\n        });\n\n        return stream;\n    };\n\n    _onAnnotationButtonClicked() {\n        return buttonName => {\n            if (buttonName === \"Action Item\") {\n                let actionItem;\n                if (this.state.recordingState === RecordingState.RECORDING) {\n                    actionItem = new ActionItemAnnotation(\n                        this.state.elapsedTimeMs\n                    );\n                } else {\n                    if (this.state.audioItem.url) {\n                        actionItem = new ActionItemAnnotation(\n                            this._audioPlayer.audioEl.currentTime * 1000\n                        );\n                    }\n                }\n\n                const prevAudioItem = this.state.audioItem;\n                let newAudioItem = new AudioItem(\n                    [...prevAudioItem.annotations, actionItem],\n                    prevAudioItem.url,\n                    prevAudioItem.stream\n                );\n                this.setState({\n                    audioItem: newAudioItem\n                });\n            }\n        };\n    }\n}\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}